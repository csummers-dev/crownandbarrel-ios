name: iOS CI/CD Pipeline (Optimized)

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

env:
  # iOS build variables
  XCODE_VERSION: "26.0.0"
  
  # Project variables
  PROJECT_NAME: "CrownAndBarrel"
  SCHEME_NAME: "CrownAndBarrel"
  BUNDLE_ID: "com.crownandbarrel.app"

jobs:
  # Setup stage - Prepare environment and dependencies
  setup:
    name: Environment Setup
    runs-on: macos-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Setup iOS Environment
        uses: ./.github/actions/setup-ios-environment
        with:
          xcode-version: ${{ env.XCODE_VERSION }}
          install-xcodegen: 'true'
          install-swiftlint: 'false'
          install-xcpretty: 'false'
          cache-key-suffix: 'setup'
          
      - name: Cache Swift Packages
        uses: ./.github/actions/cache-dependencies
        with:
          cache-type: 'swift-packages'
          cache-key: ${{ hashFiles('**/Package.resolved') }}
          restore-keys: |
            ${{ hashFiles('**/Package.swift') }}
            latest
          cache-suffix: 'setup'
            
      - name: Cache DerivedData
        uses: ./.github/actions/cache-dependencies
        with:
          cache-type: 'derived-data'
          cache-key: ${{ hashFiles('**/*.swift') }}
          restore-keys: |
            ${{ hashFiles('Sources/**/*.swift') }}
            base
          cache-suffix: 'setup'

  # Lint stage - Code quality checks
  lint:
    name: Code Quality
    runs-on: macos-latest
    needs: setup
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Setup iOS Environment
        uses: ./.github/actions/setup-ios-environment
        with:
          xcode-version: ${{ env.XCODE_VERSION }}
          install-xcodegen: 'false'
          install-swiftlint: 'true'
          install-xcpretty: 'false'
          generate-project: 'false'
          cache-key-suffix: 'lint'
          
      - name: Run SwiftLint
        run: |
          swiftlint lint --reporter github --config .swiftlint.yml
        continue-on-error: true
        
      - name: Upload SwiftLint results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: swiftlint-results
          path: swiftlint-report.json
          retention-days: 30

  # Build stage - Compile the application
  build:
    name: Build Application
    runs-on: macos-latest
    needs: setup
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Setup iOS Environment
        uses: ./.github/actions/setup-ios-environment
        with:
          xcode-version: ${{ env.XCODE_VERSION }}
          install-xcodegen: 'true'
          install-swiftlint: 'false'
          install-xcpretty: 'false'
          cache-key-suffix: 'build'
          
      - name: Cache Swift Packages
        uses: ./.github/actions/cache-dependencies
        with:
          cache-type: 'swift-packages'
          cache-key: ${{ hashFiles('**/Package.resolved') }}
          restore-keys: |
            ${{ hashFiles('**/Package.swift') }}
            latest
          cache-suffix: 'build'
          
      - name: Build for Debug
        run: |
          # Find the best available iOS 26.0 simulator for Debug build
          echo "Looking for available iOS 26.0 simulators for Debug build..."
          
          # Check for iPhone 16 Pro with iOS 26.0 first (preferred) - only iOS Simulator platform
          if xcodebuild -showdestinations -scheme "${{ env.SCHEME_NAME }}" -project "${{ env.PROJECT_NAME }}.xcodeproj" 2>/dev/null | grep "platform:iOS Simulator" | grep -q "iPhone 16 Pro.*26.0"; then
            DESTINATION="platform=iOS Simulator,name=iPhone 16 Pro,OS=26.0"
            echo "✅ Found iPhone 16 Pro with iOS 26.0 - using preferred target for Debug build"
          # Fallback to any iPhone with iOS 26.0 - only iOS Simulator platform
          elif xcodebuild -showdestinations -scheme "${{ env.SCHEME_NAME }}" -project "${{ env.PROJECT_NAME }}.xcodeproj" 2>/dev/null | grep "platform:iOS Simulator" | grep -q "iPhone.*26.0"; then
            # Use iPhone 16 as reliable fallback
            DESTINATION="platform=iOS Simulator,name=iPhone 16,OS=26.0"
            echo "✅ Using iPhone 16 with iOS 26.0 - reliable fallback for Debug build"
          else
            echo "❌ No iOS 26.0 simulators found, skipping Debug build"
            exit 0
          fi
          
          echo "Using destination: $DESTINATION"
          xcodebuild build \
            -project "${{ env.PROJECT_NAME }}.xcodeproj" \
            -scheme "${{ env.SCHEME_NAME }}" \
            -configuration Debug \
            -destination "$DESTINATION" \
            IPHONEOS_DEPLOYMENT_TARGET=26.0 \
            CODE_SIGNING_ALLOWED=NO \
            ONLY_ACTIVE_ARCH=YES \
            VALID_ARCHS="arm64" \
            ARCHS="arm64" \
            ENABLE_BITCODE=NO
            
      - name: Build for Release
        run: |
          # Find the best available iOS 26.0 simulator for Release build
          echo "Looking for available iOS 26.0 simulators for Release build..."
          
          # Check for iPhone 16 Pro with iOS 26.0 first (preferred) - only iOS Simulator platform
          if xcodebuild -showdestinations -scheme "${{ env.SCHEME_NAME }}" -project "${{ env.PROJECT_NAME }}.xcodeproj" 2>/dev/null | grep "platform:iOS Simulator" | grep -q "iPhone 16 Pro.*26.0"; then
            DESTINATION="platform=iOS Simulator,name=iPhone 16 Pro,OS=26.0"
            echo "✅ Found iPhone 16 Pro with iOS 26.0 - using preferred target for Release build"
          # Fallback to any iPhone with iOS 26.0 - only iOS Simulator platform
          elif xcodebuild -showdestinations -scheme "${{ env.SCHEME_NAME }}" -project "${{ env.PROJECT_NAME }}.xcodeproj" 2>/dev/null | grep "platform:iOS Simulator" | grep -q "iPhone.*26.0"; then
            # Get first available iPhone with iOS 26.0
            # Use iPhone 16 as reliable fallback
            DESTINATION="platform=iOS Simulator,name=iPhone 16,OS=26.0"
            echo "✅ Using iPhone 16 with iOS 26.0 - reliable fallback for Release build"
          else
            echo "❌ No iOS 26.0 simulators found, skipping Release build"
            exit 0
          fi
          
          echo "Using destination: $DESTINATION"
          xcodebuild build \
            -project "${{ env.PROJECT_NAME }}.xcodeproj" \
            -scheme "${{ env.SCHEME_NAME }}" \
            -configuration Release \
            -destination "$DESTINATION" \
            IPHONEOS_DEPLOYMENT_TARGET=26.0 \
            CODE_SIGNING_ALLOWED=NO \
            ONLY_ACTIVE_ARCH=YES \
            VALID_ARCHS="arm64" \
            ARCHS="arm64" \
            ENABLE_BITCODE=NO
            
      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: build-artifacts
          path: |
            ~/Library/Developer/Xcode/DerivedData/
          retention-days: 7

  # Test stage - Run unit and UI tests
  test-unit:
    name: Unit Tests
    runs-on: macos-latest
    needs: setup
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Setup iOS Environment
        uses: ./.github/actions/setup-ios-environment
        with:
          xcode-version: ${{ env.XCODE_VERSION }}
          install-xcodegen: 'true'
          install-swiftlint: 'false'
          install-xcpretty: 'false'
          cache-key-suffix: 'unit-tests'
          
      - name: Cache Swift Packages
        uses: ./.github/actions/cache-dependencies
        with:
          cache-type: 'swift-packages'
          cache-key: ${{ hashFiles('**/Package.resolved') }}
          restore-keys: |
            ${{ hashFiles('**/Package.swift') }}
            latest
          cache-suffix: 'unit-tests'
          
      - name: Run Unit Tests
        run: |
          echo "Looking for available iOS 26.0 simulators for unit tests..."
          
          # Check for iPhone 16 Pro with iOS 26.0 first (preferred) - only iOS Simulator platform
          if xcodebuild -showdestinations -scheme "${{ env.SCHEME_NAME }}" -project "${{ env.PROJECT_NAME }}.xcodeproj" 2>/dev/null | grep "platform:iOS Simulator" | grep -q "iPhone 16 Pro.*26.0"; then
            DESTINATION="platform=iOS Simulator,name=iPhone 16 Pro,OS=26.0"
            echo "✅ Found iPhone 16 Pro with iOS 26.0 - using preferred target for unit tests"
          # Fallback to any iPhone with iOS 26.0 - only iOS Simulator platform
          elif xcodebuild -showdestinations -scheme "${{ env.SCHEME_NAME }}" -project "${{ env.PROJECT_NAME }}.xcodeproj" 2>/dev/null | grep "platform:iOS Simulator" | grep -q "iPhone.*26.0"; then
            # Get first available iPhone with iOS 26.0
            # Use iPhone 16 as reliable fallback
            DESTINATION="platform=iOS Simulator,name=iPhone 16,OS=26.0"
            echo "✅ Using iPhone 16 with iOS 26.0 - reliable fallback for unit tests"
          else
            echo "❌ No iOS 26.0 simulators found, skipping unit tests"
            exit 0
          fi
          
          echo "Running unit tests with destination: $DESTINATION"
          xcodebuild test \
            -project "${{ env.PROJECT_NAME }}.xcodeproj" \
            -scheme "${{ env.SCHEME_NAME }}" \
            -destination "$DESTINATION" \
            "-only-testing:${{ env.SCHEME_NAME }}Tests" \
            -resultBundlePath TestResults.xcresult \
            CODE_SIGNING_ALLOWED=NO \
            ONLY_ACTIVE_ARCH=YES \
            VALID_ARCHS="arm64" \
            ARCHS="arm64" \
            ENABLE_BITCODE=NO \
            IPHONEOS_DEPLOYMENT_TARGET=26.0
            
      - name: Upload test results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: unit-test-results
          path: TestResults.xcresult
          retention-days: 30

  test-ui:
    name: UI Tests
    runs-on: macos-latest
    needs: setup
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Setup iOS Environment
        uses: ./.github/actions/setup-ios-environment
        with:
          xcode-version: ${{ env.XCODE_VERSION }}
          install-xcodegen: 'true'
          install-swiftlint: 'false'
          install-xcpretty: 'false'
          cache-key-suffix: 'ui-tests'
          
      - name: Cache Swift Packages
        uses: ./.github/actions/cache-dependencies
        with:
          cache-type: 'swift-packages'
          cache-key: ${{ hashFiles('**/Package.resolved') }}
          restore-keys: |
            ${{ hashFiles('**/Package.swift') }}
            latest
          cache-suffix: 'ui-tests'
          
      - name: Run UI Tests
        run: |
          echo "Looking for available iOS 26.0 simulators for UI tests..."
          
          # Check for iPhone 16 Pro with iOS 26.0 first (preferred) - only iOS Simulator platform
          if xcodebuild -showdestinations -scheme "${{ env.SCHEME_NAME }}" -project "${{ env.PROJECT_NAME }}.xcodeproj" 2>/dev/null | grep "platform:iOS Simulator" | grep -q "iPhone 16 Pro.*26.0"; then
            DESTINATION="platform=iOS Simulator,name=iPhone 16 Pro,OS=26.0"
            echo "✅ Found iPhone 16 Pro with iOS 26.0 - using preferred target for UI tests"
          # Fallback to any iPhone with iOS 26.0 - only iOS Simulator platform
          elif xcodebuild -showdestinations -scheme "${{ env.SCHEME_NAME }}" -project "${{ env.PROJECT_NAME }}.xcodeproj" 2>/dev/null | grep "platform:iOS Simulator" | grep -q "iPhone.*26.0"; then
            # Get first available iPhone with iOS 26.0
            # Use iPhone 16 as reliable fallback
            DESTINATION="platform=iOS Simulator,name=iPhone 16,OS=26.0"
            echo "✅ Using iPhone 16 with iOS 26.0 - reliable fallback for UI tests"
          else
            echo "❌ No iOS 26.0 simulators found, skipping UI tests"
            exit 0
          fi
          
          echo "Running UI tests with destination: $DESTINATION"
          xcodebuild test \
            -project "${{ env.PROJECT_NAME }}.xcodeproj" \
            -scheme "${{ env.SCHEME_NAME }}" \
            -destination "$DESTINATION" \
            "-only-testing:${{ env.SCHEME_NAME }}UITests" \
            -resultBundlePath UITestResults.xcresult \
            CODE_SIGNING_ALLOWED=NO \
            ONLY_ACTIVE_ARCH=YES \
            VALID_ARCHS="arm64" \
            ARCHS="arm64" \
            ENABLE_BITCODE=NO \
            IPHONEOS_DEPLOYMENT_TARGET=26.0
            
      - name: Upload UI test results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: ui-test-results
          path: UITestResults.xcresult
          retention-days: 30

  # Deploy stage - Create release artifacts (only on main branch)
  deploy:
    name: Deploy
    runs-on: macos-latest
    needs: [lint, build, test-unit, test-ui]
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Setup iOS Environment
        uses: ./.github/actions/setup-ios-environment
        with:
          xcode-version: ${{ env.XCODE_VERSION }}
          install-xcodegen: 'true'
          install-swiftlint: 'false'
          install-xcpretty: 'false'
          cache-key-suffix: 'deploy'
          
      - name: Cache Swift Packages
        uses: ./.github/actions/cache-dependencies
        with:
          cache-type: 'swift-packages'
          cache-key: ${{ hashFiles('**/Package.resolved') }}
          restore-keys: |
            ${{ hashFiles('**/Package.swift') }}
            latest
          cache-suffix: 'deploy'
          
      - name: Build Release Archive
        run: |
          echo "Building Release Archive for iOS devices..."
          echo "Using generic iOS destination for archive build"
          xcodebuild archive \
            -project "${{ env.PROJECT_NAME }}.xcodeproj" \
            -scheme "${{ env.SCHEME_NAME }}" \
            -configuration Release \
            -destination "generic/platform=iOS" \
            -archivePath "${{ env.PROJECT_NAME }}.xcarchive" \
            IPHONEOS_DEPLOYMENT_TARGET=26.0 \
            CODE_SIGNING_ALLOWED=NO \
            ONLY_ACTIVE_ARCH=YES \
            VALID_ARCHS="arm64" \
            ARCHS="arm64" \
            ENABLE_BITCODE=NO
