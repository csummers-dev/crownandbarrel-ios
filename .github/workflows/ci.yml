name: CI

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]
    paths-ignore:
      - 'docs/**'
      - '*.md'
      - 'README.md'
      - 'CHANGELOG.md'

jobs:
  test:
    runs-on: macos-14
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        
      - name: Setup Xcode
        uses: maxim-lobanov/setup-xcode@v1
        with:
          xcode-version: latest-stable

      - name: Install coreutils for timeout
        run: brew install coreutils

      - name: Debug environment (early)
        run: |
          echo "=== Early Environment Debug ==="
          echo "Xcode version:"
          xcodebuild -version
          echo ""
          echo "Available SDKs:"
          xcodebuild -showsdks
          echo ""
          echo "All available simulators:"
          xcrun simctl list devices available
          echo ""
          echo "iPhone simulators only:"
          xcrun simctl list devices available | grep iPhone
          echo ""
          echo "iPhone 16 Pro simulators specifically:"
          xcrun simctl list devices available | grep "iPhone 16 Pro"

      - name: Cache Swift Package Manager
        uses: actions/cache@v4
        with:
          path: ~/Library/Caches/org.swift.swiftpm
          key: ${{ runner.os }}-spm-${{ hashFiles('**/Package.resolved', '**/project.pbxproj') }}
          restore-keys: |
            ${{ runner.os }}-spm-
            
      - name: Cache DerivedData
        uses: actions/cache@v4
        with:
          path: ~/Library/Developer/Xcode/DerivedData
          key: ${{ runner.os }}-deriveddata-${{ hashFiles('Sources/**/*.swift', 'Tests/**/*.swift') }}
          restore-keys: |
            ${{ runner.os }}-deriveddata-

      - name: Boot simulator
        run: |
          echo "Available iPhone simulators:"
          xcrun simctl list devices available | grep iPhone
          
          # Check for iPhone 16 Pro with iOS 26.0 specifically
          if xcrun simctl list devices available | grep -q "iPhone 16 Pro.*26.0"; then
            echo "Found iPhone 16 Pro with iOS 26.0 - booting..."
            xcrun simctl boot "iPhone 16 Pro" || true
            SIMULATOR="iPhone 16 Pro"
            OS_VERSION="26.0"
          elif xcrun simctl list devices available | grep -q "iPhone 16 Pro"; then
            echo "Found iPhone 16 Pro but not iOS 26.0 - checking available iOS versions..."
            xcrun simctl list devices available | grep "iPhone 16 Pro"
            echo "ERROR: iPhone 16 Pro found but not with iOS 26.0. App requires iOS 26.0 minimum."
            exit 1
          else
            echo "ERROR: No iPhone 16 Pro simulator found. App requires iOS 26.0 minimum."
            echo "Available simulators:"
            xcrun simctl list devices available | grep iPhone
            exit 1
          fi
          
          echo "Waiting for simulator to be ready..."
          sleep 10
          echo "Simulator status:"
          xcrun simctl list devices | grep "$SIMULATOR"

      - name: Resolve packages
        run: xcodebuild -resolvePackageDependencies -project CrownAndBarrel.xcodeproj

      - name: Debug environment
        run: |
          echo "=== Environment Debug ==="
          echo "Xcode version:"
          xcodebuild -version
          echo ""
          echo "Available SDKs:"
          xcodebuild -showsdks
          echo ""
          echo "Available destinations:"
          xcodebuild -showdestinations -scheme "CrownAndBarrel" -project CrownAndBarrel.xcodeproj
          echo ""
          echo "All available simulators:"
          xcrun simctl list devices available
          echo ""
          echo "iPhone simulators only:"
          xcrun simctl list devices available | grep iPhone
          echo ""
          echo "iPhone 16 Pro simulators specifically:"
          xcrun simctl list devices available | grep "iPhone 16 Pro"
          echo ""
          echo "Simulator processes:"
          ps aux | grep Simulator || echo "No Simulator processes"
          echo ""
          echo "Memory usage:"
          vm_stat
          echo ""
          echo "Disk space:"
          df -h

      - name: Run unit tests only
        run: |
          echo "Starting unit tests..."
          
          # Check for iPhone 16 Pro with iOS 26.0 specifically (same logic as boot step)
          if xcrun simctl list devices available | grep -q "iPhone 16 Pro.*26.0"; then
            SIMULATOR="iPhone 16 Pro"
            OS_VERSION="26.0"
          else
            echo "ERROR: iPhone 16 Pro with iOS 26.0 not available. App requires iOS 26.0 minimum."
            echo "Available simulators:"
            xcrun simctl list devices available | grep iPhone
            exit 1
          fi
          
          echo "Using simulator: $SIMULATOR with iOS $OS_VERSION"
          echo "Testing simulator boot status:"
          xcrun simctl list devices | grep "$SIMULATOR"
          
          echo "Checking project and scheme..."
          xcodebuild -list -project CrownAndBarrel.xcodeproj
          
          echo "Testing basic build first..."
          xcodebuild build -project CrownAndBarrel.xcodeproj -scheme "CrownAndBarrel" -destination "platform=iOS Simulator,name=$SIMULATOR,OS=$OS_VERSION" -quiet
          
          echo "Running unit tests with verbose output and timeout..."
          # Remove -quiet to see what's happening, add timeout, specify OS version
          timeout 300 xcodebuild test -project CrownAndBarrel.xcodeproj -scheme "CrownAndBarrel" -destination "platform=iOS Simulator,name=$SIMULATOR,OS=$OS_VERSION" -only-testing:CrownAndBarrelTests -disableAutomaticPackageResolution
          
          echo "Unit tests completed successfully!"