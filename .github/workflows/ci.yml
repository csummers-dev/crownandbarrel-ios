name: iOS CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

env:
  # iOS build variables
  XCODE_VERSION: "16.0"
  
  # Project variables
  PROJECT_NAME: "CrownAndBarrel"
  SCHEME_NAME: "CrownAndBarrel"
  BUNDLE_ID: "com.crownandbarrel.app"

jobs:
  # Setup stage - Prepare environment and dependencies
  setup:
    name: Environment Setup
    runs-on: macos-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Setup Xcode
        uses: maxim-lobanov/setup-xcode@v1
        with:
          xcode-version: ${{ env.XCODE_VERSION }}
          
      - name: Show Xcode version
        run: xcodebuild -version
        
      - name: List available iOS runtimes
        run: |
          echo "=== Available iOS Simulator Runtimes ==="
          xcrun simctl list runtimes | grep iOS || echo "No iOS runtimes found"
          echo ""
          echo "=== Available iOS Simulator Devices ==="
          xcrun simctl list devices | grep iPhone || echo "No iPhone simulators found"
          
      - name: Check iOS Runtime Compatibility
        run: |
          echo "Checking available iOS runtimes and finding compatible version..."
          AVAILABLE_RUNTIMES=$(xcrun simctl list runtimes | grep iOS | head -1 | awk '{print $NF}' | sed 's/[()]//g')
          if [ -n "$AVAILABLE_RUNTIMES" ]; then
            echo "Found compatible iOS runtime: $AVAILABLE_RUNTIMES"
            echo "IOS_RUNTIME_VERSION=$AVAILABLE_RUNTIMES" >> $GITHUB_OUTPUT
          else
            echo "Using default iOS 17.0 runtime"
            echo "IOS_RUNTIME_VERSION=17.0" >> $GITHUB_OUTPUT
          fi
        
      - name: List available simulators
        run: |
          echo "=== Available iOS Simulators ==="
          xcrun simctl list devices available | grep iPhone || echo "No iPhone simulators found"
          echo ""
          echo "=== All Available Devices ==="
          xcrun simctl list devices available
          
      - name: Setup simulator
        id: simulator
        run: |
          # Find the first available iPhone simulator
          echo "Searching for available iPhone simulators..."
          
          # Try different iPhone models in order of preference (most advanced first)
          for model in "iPhone 15 Pro" "iPhone 15" "iPhone 14 Pro" "iPhone 14" "iPhone 13 Pro" "iPhone 13" "iPhone 12 Pro" "iPhone 12" "iPhone 11 Pro" "iPhone 11"; do
            echo "Checking for $model..."
            if xcrun simctl list devices available | grep -q "$model"; then
              echo "Found $model simulator"
              SIMULATOR_NAME="$model"
              break
            fi
          done
          
          # If no specific model found, get the first iPhone simulator
          if [ -z "$SIMULATOR_NAME" ]; then
            echo "No specific iPhone model found, searching for any iPhone simulator..."
            SIMULATOR_NAME=$(xcrun simctl list devices available | grep iPhone | head -1 | sed 's/.*(\([^)]*\)).*/\1/')
            if [ -z "$SIMULATOR_NAME" ]; then
              echo "ERROR: No iPhone simulators found!"
              exit 1
            fi
          fi
          
          echo "Using simulator: $SIMULATOR_NAME"
          echo "name=$SIMULATOR_NAME" >> $GITHUB_OUTPUT
          
          # Boot the simulator
          echo "Booting $SIMULATOR_NAME..."
          xcrun simctl boot "$SIMULATOR_NAME" || true
          
          # Wait a moment for boot to complete
          sleep 5
          
          # Verify simulator is booted
          echo "Verifying simulator status..."
          xcrun simctl list devices | grep "$SIMULATOR_NAME" | grep "Booted" || echo "Warning: Simulator may not be fully booted"
          echo "Simulator setup completed"
          
      - name: Install XcodeGen
        run: |
          if ! command -v xcodegen &> /dev/null; then
            echo "Installing XcodeGen..."
            # Ensure we use the correct architecture for Homebrew
            if [[ $(uname -m) == "arm64" ]]; then
              arch -arm64 brew install xcodegen
            else
              brew install xcodegen
            fi
          fi
          
      - name: Generate Xcode project
        run: |
          echo "Generating Xcode project with XcodeGen..."
          xcodegen generate
          
      - name: Cache Swift Package Manager
        uses: actions/cache@v4
        with:
          path: .build
          key: ${{ runner.os }}-spm-${{ hashFiles('**/Package.resolved') }}
          restore-keys: |
            ${{ runner.os }}-spm-
            
      - name: Cache DerivedData
        uses: actions/cache@v4
        with:
          path: ~/Library/Developer/Xcode/DerivedData
          key: ${{ runner.os }}-deriveddata-${{ hashFiles('**/*.swift') }}
          restore-keys: |
            ${{ runner.os }}-deriveddata-

  # Lint stage - Code quality checks
  lint:
    name: Code Quality
    runs-on: macos-latest
    needs: setup
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Setup Xcode
        uses: maxim-lobanov/setup-xcode@v1
        with:
          xcode-version: ${{ env.XCODE_VERSION }}
          
      - name: Install SwiftLint
        run: |
          if ! command -v swiftlint &> /dev/null; then
            echo "Installing SwiftLint..."
            # Ensure we use the correct architecture for Homebrew
            if [[ $(uname -m) == "arm64" ]]; then
              arch -arm64 brew install swiftlint
            else
              brew install swiftlint
            fi
          fi
          
      - name: Run SwiftLint
        run: |
          swiftlint lint --reporter github --config .swiftlint.yml
        continue-on-error: true
        
      - name: Upload SwiftLint results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: swiftlint-results
          path: swiftlint-report.json
          retention-days: 30

  # Build stage - Compile the application
  build:
    name: Build Application
    runs-on: macos-latest
    needs: setup
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Setup Xcode
        uses: maxim-lobanov/setup-xcode@v1
        with:
          xcode-version: ${{ env.XCODE_VERSION }}
          
      - name: Install XcodeGen
        run: |
          if ! command -v xcodegen &> /dev/null; then
            echo "Installing XcodeGen..."
            # Ensure we use the correct architecture for Homebrew
            if [[ $(uname -m) == "arm64" ]]; then
              arch -arm64 brew install xcodegen
            else
              brew install xcodegen
            fi
          fi
          
      - name: Generate Xcode project
        run: |
          echo "Generating Xcode project with XcodeGen..."
          xcodegen generate
          
      - name: Build for Debug
        run: |
          xcodebuild build \
            -project "${{ env.PROJECT_NAME }}.xcodeproj" \
            -scheme "${{ env.SCHEME_NAME }}" \
            -configuration Debug \
            -destination "generic/platform=iOS Simulator" \
            CODE_SIGNING_ALLOWED=NO \
            ONLY_ACTIVE_ARCH=YES \
            VALID_ARCHS="arm64" \
            ARCHS="arm64" \
            ENABLE_BITCODE=NO
            
      - name: Build for Release
        run: |
          xcodebuild build \
            -project "${{ env.PROJECT_NAME }}.xcodeproj" \
            -scheme "${{ env.SCHEME_NAME }}" \
            -configuration Release \
            -destination "generic/platform=iOS Simulator" \
            CODE_SIGNING_ALLOWED=NO \
            ONLY_ACTIVE_ARCH=YES \
            VALID_ARCHS="arm64" \
            ARCHS="arm64" \
            ENABLE_BITCODE=NO
            
      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: build-artifacts
          path: |
            ~/Library/Developer/Xcode/DerivedData/
          retention-days: 7

  # Test stage - Run unit and UI tests
  test-unit:
    name: Unit Tests
    runs-on: macos-latest
    needs: setup
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Setup Xcode
        uses: maxim-lobanov/setup-xcode@v1
        with:
          xcode-version: ${{ env.XCODE_VERSION }}
          
      - name: Install XcodeGen
        run: |
          if ! command -v xcodegen &> /dev/null; then
            echo "Installing XcodeGen..."
            # Ensure we use the correct architecture for Homebrew
            if [[ $(uname -m) == "arm64" ]]; then
              arch -arm64 brew install xcodegen
            else
              brew install xcodegen
            fi
          fi
          
      - name: Generate Xcode project
        run: |
          echo "Generating Xcode project with XcodeGen..."
          xcodegen generate
          
      - name: List available simulators
        run: |
          echo "=== Available iOS Simulators ==="
          xcrun simctl list devices available | grep iPhone || echo "No iPhone simulators found"
          echo ""
          echo "=== All Available Devices ==="
          xcrun simctl list devices available
          
      - name: Setup simulator
        run: |
          # Find the first available iPhone simulator
          echo "Searching for available iPhone simulators..."
          
          # Try different iPhone models in order of preference (most advanced first)
          for model in "iPhone 15 Pro" "iPhone 15" "iPhone 14 Pro" "iPhone 14" "iPhone 13 Pro" "iPhone 13" "iPhone 12 Pro" "iPhone 12" "iPhone 11 Pro" "iPhone 11"; do
            echo "Checking for $model..."
            if xcrun simctl list devices available | grep -q "$model"; then
              echo "Found $model simulator"
              SIMULATOR_NAME="$model"
              break
            fi
          done
          
          # If no specific model found, get the first iPhone simulator
          if [ -z "$SIMULATOR_NAME" ]; then
            echo "No specific iPhone model found, searching for any iPhone simulator..."
            SIMULATOR_NAME=$(xcrun simctl list devices available | grep iPhone | head -1 | sed 's/.*(\([^)]*\)).*/\1/')
            if [ -z "$SIMULATOR_NAME" ]; then
              echo "ERROR: No iPhone simulators found!"
              exit 1
            fi
          fi
          
          echo "Using simulator: $SIMULATOR_NAME"
          
          # Boot the simulator
          echo "Booting $SIMULATOR_NAME..."
          xcrun simctl boot "$SIMULATOR_NAME" || true
          
          # Wait a moment for boot to complete
          sleep 5
          
          # Verify simulator is booted
          echo "Verifying simulator status..."
          xcrun simctl list devices | grep "$SIMULATOR_NAME" | grep "Booted" || echo "Warning: Simulator may not be fully booted"
          echo "SIMULATOR_NAME=$SIMULATOR_NAME" >> $GITHUB_OUTPUT
          
      - name: Run Unit Tests
        run: |
          echo "Running unit tests on iPhone 15 Pro simulator..."
          
          xcodebuild test \
            -project "${{ env.PROJECT_NAME }}.xcodeproj" \
            -scheme "${{ env.SCHEME_NAME }}" \
            -destination "generic/platform=iOS Simulator" \
            "-only-testing:${{ env.SCHEME_NAME }}Tests" \
            -resultBundlePath TestResults.xcresult \
            CODE_SIGNING_ALLOWED=NO \
            ONLY_ACTIVE_ARCH=YES \
            VALID_ARCHS="arm64" \
            ARCHS="arm64" \
            ENABLE_BITCODE=NO
            
      - name: Upload test results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: unit-test-results
          path: TestResults.xcresult
          retention-days: 30

  test-ui:
    name: UI Tests
    runs-on: macos-latest
    needs: setup
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Setup Xcode
        uses: maxim-lobanov/setup-xcode@v1
        with:
          xcode-version: ${{ env.XCODE_VERSION }}
          
      - name: Install XcodeGen
        run: |
          if ! command -v xcodegen &> /dev/null; then
            echo "Installing XcodeGen..."
            # Ensure we use the correct architecture for Homebrew
            if [[ $(uname -m) == "arm64" ]]; then
              arch -arm64 brew install xcodegen
            else
              brew install xcodegen
            fi
          fi
          
      - name: Generate Xcode project
        run: |
          echo "Generating Xcode project with XcodeGen..."
          xcodegen generate
          
      - name: List available simulators
        run: |
          echo "=== Available iOS Simulators ==="
          xcrun simctl list devices available | grep iPhone || echo "No iPhone simulators found"
          echo ""
          echo "=== All Available Devices ==="
          xcrun simctl list devices available
          
      - name: Setup simulator
        run: |
          # Find the first available iPhone simulator
          echo "Searching for available iPhone simulators..."
          
          # Try different iPhone models in order of preference (most advanced first)
          for model in "iPhone 15 Pro" "iPhone 15" "iPhone 14 Pro" "iPhone 14" "iPhone 13 Pro" "iPhone 13" "iPhone 12 Pro" "iPhone 12" "iPhone 11 Pro" "iPhone 11"; do
            echo "Checking for $model..."
            if xcrun simctl list devices available | grep -q "$model"; then
              echo "Found $model simulator"
              SIMULATOR_NAME="$model"
              break
            fi
          done
          
          # If no specific model found, get the first iPhone simulator
          if [ -z "$SIMULATOR_NAME" ]; then
            echo "No specific iPhone model found, searching for any iPhone simulator..."
            SIMULATOR_NAME=$(xcrun simctl list devices available | grep iPhone | head -1 | sed 's/.*(\([^)]*\)).*/\1/')
            if [ -z "$SIMULATOR_NAME" ]; then
              echo "ERROR: No iPhone simulators found!"
              exit 1
            fi
          fi
          
          echo "Using simulator: $SIMULATOR_NAME"
          
          # Boot the simulator
          echo "Booting $SIMULATOR_NAME..."
          xcrun simctl boot "$SIMULATOR_NAME" || true
          
          # Wait a moment for boot to complete
          sleep 5
          
          # Verify simulator is booted
          echo "Verifying simulator status..."
          xcrun simctl list devices | grep "$SIMULATOR_NAME" | grep "Booted" || echo "Warning: Simulator may not be fully booted"
          echo "SIMULATOR_NAME=$SIMULATOR_NAME" >> $GITHUB_OUTPUT
          
      - name: Run UI Tests
        run: |
          echo "Running UI tests on iPhone 15 Pro simulator..."
          
          xcodebuild test \
            -project "${{ env.PROJECT_NAME }}.xcodeproj" \
            -scheme "${{ env.SCHEME_NAME }}" \
            -destination "generic/platform=iOS Simulator" \
            "-only-testing:${{ env.SCHEME_NAME }}UITests" \
            -resultBundlePath UITestResults.xcresult \
            CODE_SIGNING_ALLOWED=NO \
            ONLY_ACTIVE_ARCH=YES \
            VALID_ARCHS="arm64" \
            ARCHS="arm64" \
            ENABLE_BITCODE=NO
            
      - name: Upload UI test results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: ui-test-results
          path: UITestResults.xcresult
          retention-days: 30

  # Deploy stage - Create release artifacts (only on main branch)
  deploy:
    name: Deploy
    runs-on: macos-latest
    needs: [lint, build, test-unit, test-ui]
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Setup Xcode
        uses: maxim-lobanov/setup-xcode@v1
        with:
          xcode-version: ${{ env.XCODE_VERSION }}
          
      - name: Install XcodeGen
        run: |
          if ! command -v xcodegen &> /dev/null; then
            echo "Installing XcodeGen..."
            # Ensure we use the correct architecture for Homebrew
            if [[ $(uname -m) == "arm64" ]]; then
              arch -arm64 brew install xcodegen
            else
              brew install xcodegen
            fi
          fi
          
      - name: Generate Xcode project
        run: |
          echo "Generating Xcode project with XcodeGen..."
          xcodegen generate
          
      - name: Build Release Archive
        run: |
          xcodebuild archive \
            -project "${{ env.PROJECT_NAME }}.xcodeproj" \
            -scheme "${{ env.SCHEME_NAME }}" \
            -configuration Release \
            -destination "generic/platform=iOS" \
            -archivePath "${{ env.PROJECT_NAME }}.xcarchive" \
            CODE_SIGNING_ALLOWED=NO \
            ONLY_ACTIVE_ARCH=YES \
            VALID_ARCHS="arm64" \
            ARCHS="arm64" \
            ENABLE_BITCODE=NO