name: iOS CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

env:
  # iOS build variables
  XCODE_VERSION: "16.0"
  
  # Project variables
  PROJECT_NAME: "CrownAndBarrel"
  SCHEME_NAME: "CrownAndBarrel"
  BUNDLE_ID: "com.crownandbarrel.app"

jobs:
  # Setup stage - Prepare environment and dependencies
  setup:
    name: Environment Setup
    runs-on: macos-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Setup Xcode
        uses: maxim-lobanov/setup-xcode@v1
        with:
          xcode-version: ${{ env.XCODE_VERSION }}
          
      - name: Show Xcode version
        run: xcodebuild -version
        
      - name: List available iOS runtimes
        run: |
          echo "=== Available iOS Simulator Runtimes ==="
          xcrun simctl list runtimes | grep iOS || echo "No iOS runtimes found"
          echo ""
          echo "=== Available iOS Simulator Devices ==="
          xcrun simctl list devices | grep iPhone || echo "No iPhone simulators found"
          
      - name: Check iOS Runtime Compatibility
        run: |
          echo "Checking available iOS runtimes and finding compatible version..."
          AVAILABLE_RUNTIMES=$(xcrun simctl list runtimes | grep iOS | head -1 | awk '{print $NF}' | sed 's/[()]//g')
          if [ -n "$AVAILABLE_RUNTIMES" ]; then
            echo "Found compatible iOS runtime: $AVAILABLE_RUNTIMES"
            echo "IOS_RUNTIME_VERSION=$AVAILABLE_RUNTIMES" >> $GITHUB_OUTPUT
          else
            echo "Using default iOS 17.0 runtime"
            echo "IOS_RUNTIME_VERSION=17.0" >> $GITHUB_OUTPUT
          fi
        
      - name: List available simulators
        run: |
          echo "=== Available iOS Simulators ==="
          xcrun simctl list devices available | grep iPhone || echo "No iPhone simulators found"
          echo ""
          echo "=== All Available Devices ==="
          xcrun simctl list devices available
          
      - name: Setup simulator
        id: simulator
        run: |
          # Find the first available iPhone simulator
          echo "Searching for available iPhone simulators..."
          
          # Try different iPhone models in order of preference (most advanced first)
          for model in "iPhone 15 Pro" "iPhone 15" "iPhone 14 Pro" "iPhone 14" "iPhone 13 Pro" "iPhone 13" "iPhone 12 Pro" "iPhone 12" "iPhone 11 Pro" "iPhone 11"; do
            echo "Checking for $model..."
            if xcrun simctl list devices available | grep -q "$model"; then
              echo "Found $model simulator"
              SIMULATOR_NAME="$model"
              break
            fi
          done
          
          # If no specific model found, get the first iPhone simulator
          if [ -z "$SIMULATOR_NAME" ]; then
            echo "No specific iPhone model found, searching for any iPhone simulator..."
            SIMULATOR_NAME=$(xcrun simctl list devices available | grep iPhone | head -1 | sed 's/.*(\([^)]*\)).*/\1/')
            if [ -z "$SIMULATOR_NAME" ]; then
              echo "ERROR: No iPhone simulators found!"
              exit 1
            fi
          fi
          
          echo "Using simulator: $SIMULATOR_NAME"
          echo "name=$SIMULATOR_NAME" >> $GITHUB_OUTPUT
          
          # Boot the simulator
          echo "Booting $SIMULATOR_NAME..."
          xcrun simctl boot "$SIMULATOR_NAME" || true
          
          # Wait a moment for boot to complete
          sleep 5
          
          # Verify simulator is booted
          echo "Verifying simulator status..."
          xcrun simctl list devices | grep "$SIMULATOR_NAME" | grep "Booted" || echo "Warning: Simulator may not be fully booted"
          echo "Simulator setup completed"
          
      - name: Install XcodeGen
        run: |
          if ! command -v xcodegen &> /dev/null; then
            echo "Installing XcodeGen..."
            ARCH=$(uname -m)
            echo "Detected architecture: $ARCH"
            
            # Try multiple installation strategies
            INSTALL_SUCCESS=false
            
            # Strategy 1: Direct download (most reliable)
            echo "Strategy 1: Direct download from GitHub releases..."
            if curl -fsSL https://github.com/yonaskolb/XcodeGen/releases/latest/download/xcodegen.zip -o xcodegen.zip; then
              unzip -o xcodegen.zip
              sudo mv xcodegen /usr/local/bin/
              sudo chmod +x /usr/local/bin/xcodegen
              if command -v xcodegen &> /dev/null; then
                echo "✅ XcodeGen installed via direct download"
                INSTALL_SUCCESS=true
              fi
            fi
            
            # Strategy 2: Homebrew with ARM64 forcing
            if [[ "$INSTALL_SUCCESS" == false ]]; then
              echo "Strategy 2: Homebrew with ARM64 forcing..."
              if [[ "$ARCH" == "arm64" ]]; then
                # Try multiple Homebrew paths
                for brew_path in "/opt/homebrew/bin/brew" "/usr/local/bin/brew" "brew"; do
                  echo "Trying: arch -arm64 $brew_path install xcodegen"
                  if arch -arm64 $brew_path install xcodegen 2>/dev/null; then
                    echo "✅ XcodeGen installed via Homebrew ($brew_path)"
                    INSTALL_SUCCESS=true
                    break
                  fi
                done
              else
                # x86_64 systems
                if brew install xcodegen 2>/dev/null; then
                  echo "✅ XcodeGen installed via Homebrew (x86_64)"
                  INSTALL_SUCCESS=true
                fi
              fi
            fi
            
            # Strategy 3: Swift Package Manager
            if [[ "$INSTALL_SUCCESS" == false ]]; then
              echo "Strategy 3: Swift Package Manager..."
              if swift build -c release --package-path /tmp --package-url https://github.com/yonaskolb/XcodeGen.git --product xcodegen 2>/dev/null; then
                sudo mv /tmp/.build/release/xcodegen /usr/local/bin/
                echo "✅ XcodeGen installed via Swift Package Manager"
                INSTALL_SUCCESS=true
              fi
            fi
            
            # Final verification
            if [[ "$INSTALL_SUCCESS" == false ]] || ! command -v xcodegen &> /dev/null; then
              echo "❌ Failed to install XcodeGen with all strategies"
              echo "Available tools:"
              which brew || echo "brew not found"
              which swift || echo "swift not found"
              which curl || echo "curl not found"
              exit 1
            else
              echo "✅ XcodeGen installation verified: $(which xcodegen)"
              xcodegen --version
            fi
          else
            echo "✅ XcodeGen is already installed: $(which xcodegen)"
            xcodegen --version
          fi
          
      - name: Generate Xcode project
        run: |
          echo "Generating Xcode project with XcodeGen..."
          xcodegen generate
          
      - name: Cache Swift Package Manager
        uses: actions/cache@v4
        with:
          path: .build
          key: ${{ runner.os }}-spm-${{ hashFiles('**/Package.resolved') }}
          restore-keys: |
            ${{ runner.os }}-spm-
            
      - name: Cache DerivedData
        uses: actions/cache@v4
        with:
          path: ~/Library/Developer/Xcode/DerivedData
          key: ${{ runner.os }}-deriveddata-${{ hashFiles('**/*.swift') }}
          restore-keys: |
            ${{ runner.os }}-deriveddata-

  # Lint stage - Code quality checks
  lint:
    name: Code Quality
    runs-on: macos-latest
    needs: setup
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Setup Xcode
        uses: maxim-lobanov/setup-xcode@v1
        with:
          xcode-version: ${{ env.XCODE_VERSION }}
          
      - name: Install SwiftLint
        run: |
          if ! command -v swiftlint &> /dev/null; then
            echo "Installing SwiftLint..."
            ARCH=$(uname -m)
            echo "Detected architecture: $ARCH"
            
            # Try multiple installation strategies
            INSTALL_SUCCESS=false
            
            # Strategy 1: Direct download (most reliable)
            echo "Strategy 1: Direct download from GitHub releases..."
            if curl -fsSL https://github.com/realm/SwiftLint/releases/latest/download/swiftlint_linux.zip -o swiftlint.zip; then
              unzip -o swiftlint.zip
              sudo mv swiftlint /usr/local/bin/
              sudo chmod +x /usr/local/bin/swiftlint
              if command -v swiftlint &> /dev/null; then
                echo "✅ SwiftLint installed via direct download"
                INSTALL_SUCCESS=true
              fi
            fi
            
            # Strategy 2: Homebrew with ARM64 forcing
            if [[ "$INSTALL_SUCCESS" == false ]]; then
              echo "Strategy 2: Homebrew with ARM64 forcing..."
              if [[ "$ARCH" == "arm64" ]]; then
                # Try multiple Homebrew paths
                for brew_path in "/opt/homebrew/bin/brew" "/usr/local/bin/brew" "brew"; do
                  echo "Trying: arch -arm64 $brew_path install swiftlint"
                  if arch -arm64 $brew_path install swiftlint 2>/dev/null; then
                    echo "✅ SwiftLint installed via Homebrew ($brew_path)"
                    INSTALL_SUCCESS=true
                    break
                  fi
                done
              else
                # x86_64 systems
                if brew install swiftlint 2>/dev/null; then
                  echo "✅ SwiftLint installed via Homebrew (x86_64)"
                  INSTALL_SUCCESS=true
                fi
              fi
            fi
            
            # Strategy 3: Swift Package Manager
            if [[ "$INSTALL_SUCCESS" == false ]]; then
              echo "Strategy 3: Swift Package Manager..."
              if swift build -c release --package-path /tmp --package-url https://github.com/realm/SwiftLint.git --product swiftlint 2>/dev/null; then
                sudo mv /tmp/.build/release/swiftlint /usr/local/bin/
                echo "✅ SwiftLint installed via Swift Package Manager"
                INSTALL_SUCCESS=true
              fi
            fi
            
            # Final verification
            if [[ "$INSTALL_SUCCESS" == false ]] || ! command -v swiftlint &> /dev/null; then
              echo "❌ Failed to install SwiftLint with all strategies"
              echo "Available tools:"
              which brew || echo "brew not found"
              which swift || echo "swift not found"
              which curl || echo "curl not found"
              exit 1
            else
              echo "✅ SwiftLint installation verified: $(which swiftlint)"
              swiftlint version
            fi
          else
            echo "✅ SwiftLint is already installed: $(which swiftlint)"
            swiftlint version
          fi
          
      - name: Run SwiftLint
        run: |
          swiftlint lint --reporter github --config .swiftlint.yml
        continue-on-error: true
        
      - name: Upload SwiftLint results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: swiftlint-results
          path: swiftlint-report.json
          retention-days: 30

  # Build stage - Compile the application
  build:
    name: Build Application
    runs-on: macos-latest
    needs: setup
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Setup Xcode
        uses: maxim-lobanov/setup-xcode@v1
        with:
          xcode-version: ${{ env.XCODE_VERSION }}
          
      - name: Install XcodeGen
        run: |
          if ! command -v xcodegen &> /dev/null; then
            echo "Installing XcodeGen..."
            ARCH=$(uname -m)
            echo "Detected architecture: $ARCH"
            
            # Try multiple installation strategies
            INSTALL_SUCCESS=false
            
            # Strategy 1: Direct download (most reliable)
            echo "Strategy 1: Direct download from GitHub releases..."
            if curl -fsSL https://github.com/yonaskolb/XcodeGen/releases/latest/download/xcodegen.zip -o xcodegen.zip; then
              unzip -o xcodegen.zip
              sudo mv xcodegen /usr/local/bin/
              sudo chmod +x /usr/local/bin/xcodegen
              if command -v xcodegen &> /dev/null; then
                echo "✅ XcodeGen installed via direct download"
                INSTALL_SUCCESS=true
              fi
            fi
            
            # Strategy 2: Homebrew with ARM64 forcing
            if [[ "$INSTALL_SUCCESS" == false ]]; then
              echo "Strategy 2: Homebrew with ARM64 forcing..."
              if [[ "$ARCH" == "arm64" ]]; then
                # Try multiple Homebrew paths
                for brew_path in "/opt/homebrew/bin/brew" "/usr/local/bin/brew" "brew"; do
                  echo "Trying: arch -arm64 $brew_path install xcodegen"
                  if arch -arm64 $brew_path install xcodegen 2>/dev/null; then
                    echo "✅ XcodeGen installed via Homebrew ($brew_path)"
                    INSTALL_SUCCESS=true
                    break
                  fi
                done
              else
                # x86_64 systems
                if brew install xcodegen 2>/dev/null; then
                  echo "✅ XcodeGen installed via Homebrew (x86_64)"
                  INSTALL_SUCCESS=true
                fi
              fi
            fi
            
            # Strategy 3: Swift Package Manager
            if [[ "$INSTALL_SUCCESS" == false ]]; then
              echo "Strategy 3: Swift Package Manager..."
              if swift build -c release --package-path /tmp --package-url https://github.com/yonaskolb/XcodeGen.git --product xcodegen 2>/dev/null; then
                sudo mv /tmp/.build/release/xcodegen /usr/local/bin/
                echo "✅ XcodeGen installed via Swift Package Manager"
                INSTALL_SUCCESS=true
              fi
            fi
            
            # Final verification
            if [[ "$INSTALL_SUCCESS" == false ]] || ! command -v xcodegen &> /dev/null; then
              echo "❌ Failed to install XcodeGen with all strategies"
              echo "Available tools:"
              which brew || echo "brew not found"
              which swift || echo "swift not found"
              which curl || echo "curl not found"
              exit 1
            else
              echo "✅ XcodeGen installation verified: $(which xcodegen)"
              xcodegen --version
            fi
          else
            echo "✅ XcodeGen is already installed: $(which xcodegen)"
            xcodegen --version
          fi
          
      - name: Generate Xcode project
        run: |
          echo "Generating Xcode project with XcodeGen..."
          xcodegen generate
          
      - name: Check available iOS platforms
        run: |
          echo "=== Available iOS Platforms ==="
          xcodebuild -showsdks | grep iOS || echo "No iOS SDKs found"
          echo ""
          echo "=== Available iOS Destinations ==="
          xcodebuild -showdestinations -scheme "${{ env.SCHEME_NAME }}" -project "${{ env.PROJECT_NAME }}.xcodeproj" || echo "No destinations found"
          
      - name: Build for Debug
        run: |
          # Find the best available iOS 26.0 simulator for Debug build
          echo "Looking for available iOS 26.0 simulators for Debug build..."
          
          # Check for iPhone 16 Pro with iOS 26.0 first (preferred)
          if xcodebuild -showdestinations -scheme "${{ env.SCHEME_NAME }}" -project "${{ env.PROJECT_NAME }}.xcodeproj" 2>/dev/null | grep -q "iPhone 16 Pro.*26.0"; then
            DESTINATION="platform=iOS Simulator,name=iPhone 16 Pro,OS=26.0"
            echo "✅ Found iPhone 16 Pro with iOS 26.0 - using preferred target for Debug build"
          # Fallback to any iPhone with iOS 26.0
          elif xcodebuild -showdestinations -scheme "${{ env.SCHEME_NAME }}" -project "${{ env.PROJECT_NAME }}.xcodeproj" 2>/dev/null | grep -q "iPhone.*26.0"; then
            # Get first available iPhone with iOS 26.0
            IPHONE_26_LINE=$(xcodebuild -showdestinations -scheme "${{ env.SCHEME_NAME }}" -project "${{ env.PROJECT_NAME }}.xcodeproj" 2>/dev/null | grep "iPhone.*26.0" | head -1)
            IPHONE_NAME=$(echo "$IPHONE_26_LINE" | grep -o 'name:[^,]*' | cut -d: -f2)
            DESTINATION="platform=iOS Simulator,name=$IPHONE_NAME,OS=26.0"
            echo "✅ Found $IPHONE_NAME with iOS 26.0 - using fallback target for Debug build"
          else
            echo "❌ No iOS 26.0 simulators found, skipping Debug build"
            exit 0
          fi
          
          echo "Using destination: $DESTINATION"
          xcodebuild build \
            -project "${{ env.PROJECT_NAME }}.xcodeproj" \
            -scheme "${{ env.SCHEME_NAME }}" \
            -configuration Debug \
            -destination "$DESTINATION" \
            IPHONEOS_DEPLOYMENT_TARGET=26.0 \
            CODE_SIGNING_ALLOWED=NO \
            ONLY_ACTIVE_ARCH=YES \
            VALID_ARCHS="arm64" \
            ARCHS="arm64" \
            ENABLE_BITCODE=NO
            
      - name: Build for Release
        run: |
          # Find the best available iOS 26.0 simulator for Release build
          echo "Looking for available iOS 26.0 simulators for Release build..."
          
          # Check for iPhone 16 Pro with iOS 26.0 first (preferred)
          if xcodebuild -showdestinations -scheme "${{ env.SCHEME_NAME }}" -project "${{ env.PROJECT_NAME }}.xcodeproj" 2>/dev/null | grep -q "iPhone 16 Pro.*26.0"; then
            DESTINATION="platform=iOS Simulator,name=iPhone 16 Pro,OS=26.0"
            echo "✅ Found iPhone 16 Pro with iOS 26.0 - using preferred target for Release build"
          # Fallback to any iPhone with iOS 26.0
          elif xcodebuild -showdestinations -scheme "${{ env.SCHEME_NAME }}" -project "${{ env.PROJECT_NAME }}.xcodeproj" 2>/dev/null | grep -q "iPhone.*26.0"; then
            # Get first available iPhone with iOS 26.0
            IPHONE_26_LINE=$(xcodebuild -showdestinations -scheme "${{ env.SCHEME_NAME }}" -project "${{ env.PROJECT_NAME }}.xcodeproj" 2>/dev/null | grep "iPhone.*26.0" | head -1)
            IPHONE_NAME=$(echo "$IPHONE_26_LINE" | grep -o 'name:[^,]*' | cut -d: -f2)
            DESTINATION="platform=iOS Simulator,name=$IPHONE_NAME,OS=26.0"
            echo "✅ Found $IPHONE_NAME with iOS 26.0 - using fallback target for Release build"
          else
            echo "❌ No iOS 26.0 simulators found, skipping Release build"
            exit 0
          fi
          
          echo "Using destination: $DESTINATION"
          xcodebuild build \
            -project "${{ env.PROJECT_NAME }}.xcodeproj" \
            -scheme "${{ env.SCHEME_NAME }}" \
            -configuration Release \
            -destination "$DESTINATION" \
            IPHONEOS_DEPLOYMENT_TARGET=26.0 \
            CODE_SIGNING_ALLOWED=NO \
            ONLY_ACTIVE_ARCH=YES \
            VALID_ARCHS="arm64" \
            ARCHS="arm64" \
            ENABLE_BITCODE=NO
            
      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: build-artifacts
          path: |
            ~/Library/Developer/Xcode/DerivedData/
          retention-days: 7

  # Test stage - Run unit and UI tests
  test-unit:
    name: Unit Tests
    runs-on: macos-latest
    needs: setup
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Setup Xcode
        uses: maxim-lobanov/setup-xcode@v1
        with:
          xcode-version: ${{ env.XCODE_VERSION }}
          
      - name: Install XcodeGen
        run: |
          if ! command -v xcodegen &> /dev/null; then
            echo "Installing XcodeGen..."
            ARCH=$(uname -m)
            echo "Detected architecture: $ARCH"
            
            # Try multiple installation strategies
            INSTALL_SUCCESS=false
            
            # Strategy 1: Direct download (most reliable)
            echo "Strategy 1: Direct download from GitHub releases..."
            if curl -fsSL https://github.com/yonaskolb/XcodeGen/releases/latest/download/xcodegen.zip -o xcodegen.zip; then
              unzip -o xcodegen.zip
              sudo mv xcodegen /usr/local/bin/
              sudo chmod +x /usr/local/bin/xcodegen
              if command -v xcodegen &> /dev/null; then
                echo "✅ XcodeGen installed via direct download"
                INSTALL_SUCCESS=true
              fi
            fi
            
            # Strategy 2: Homebrew with ARM64 forcing
            if [[ "$INSTALL_SUCCESS" == false ]]; then
              echo "Strategy 2: Homebrew with ARM64 forcing..."
              if [[ "$ARCH" == "arm64" ]]; then
                # Try multiple Homebrew paths
                for brew_path in "/opt/homebrew/bin/brew" "/usr/local/bin/brew" "brew"; do
                  echo "Trying: arch -arm64 $brew_path install xcodegen"
                  if arch -arm64 $brew_path install xcodegen 2>/dev/null; then
                    echo "✅ XcodeGen installed via Homebrew ($brew_path)"
                    INSTALL_SUCCESS=true
                    break
                  fi
                done
              else
                # x86_64 systems
                if brew install xcodegen 2>/dev/null; then
                  echo "✅ XcodeGen installed via Homebrew (x86_64)"
                  INSTALL_SUCCESS=true
                fi
              fi
            fi
            
            # Strategy 3: Swift Package Manager
            if [[ "$INSTALL_SUCCESS" == false ]]; then
              echo "Strategy 3: Swift Package Manager..."
              if swift build -c release --package-path /tmp --package-url https://github.com/yonaskolb/XcodeGen.git --product xcodegen 2>/dev/null; then
                sudo mv /tmp/.build/release/xcodegen /usr/local/bin/
                echo "✅ XcodeGen installed via Swift Package Manager"
                INSTALL_SUCCESS=true
              fi
            fi
            
            # Final verification
            if [[ "$INSTALL_SUCCESS" == false ]] || ! command -v xcodegen &> /dev/null; then
              echo "❌ Failed to install XcodeGen with all strategies"
              echo "Available tools:"
              which brew || echo "brew not found"
              which swift || echo "swift not found"
              which curl || echo "curl not found"
              exit 1
            else
              echo "✅ XcodeGen installation verified: $(which xcodegen)"
              xcodegen --version
            fi
          else
            echo "✅ XcodeGen is already installed: $(which xcodegen)"
            xcodegen --version
          fi
          
      - name: Generate Xcode project
        run: |
          echo "Generating Xcode project with XcodeGen..."
          xcodegen generate
          
      - name: List available simulators
        run: |
          echo "=== Available iOS Simulators ==="
          xcrun simctl list devices available | grep iPhone || echo "No iPhone simulators found"
          echo ""
          echo "=== All Available Devices ==="
          xcrun simctl list devices available
          
      - name: Setup simulator
        run: |
          # Find the first available iPhone simulator
          echo "Searching for available iPhone simulators..."
          
          # Try different iPhone models in order of preference (most advanced first)
          for model in "iPhone 15 Pro" "iPhone 15" "iPhone 14 Pro" "iPhone 14" "iPhone 13 Pro" "iPhone 13" "iPhone 12 Pro" "iPhone 12" "iPhone 11 Pro" "iPhone 11"; do
            echo "Checking for $model..."
            if xcrun simctl list devices available | grep -q "$model"; then
              echo "Found $model simulator"
              SIMULATOR_NAME="$model"
              break
            fi
          done
          
          # If no specific model found, get the first iPhone simulator
          if [ -z "$SIMULATOR_NAME" ]; then
            echo "No specific iPhone model found, searching for any iPhone simulator..."
            SIMULATOR_NAME=$(xcrun simctl list devices available | grep iPhone | head -1 | sed 's/.*(\([^)]*\)).*/\1/')
            if [ -z "$SIMULATOR_NAME" ]; then
              echo "ERROR: No iPhone simulators found!"
              exit 1
            fi
          fi
          
          echo "Using simulator: $SIMULATOR_NAME"
          
          # Boot the simulator
          echo "Booting $SIMULATOR_NAME..."
          xcrun simctl boot "$SIMULATOR_NAME" || true
          
          # Wait a moment for boot to complete
          sleep 5
          
          # Verify simulator is booted
          echo "Verifying simulator status..."
          xcrun simctl list devices | grep "$SIMULATOR_NAME" | grep "Booted" || echo "Warning: Simulator may not be fully booted"
          echo "SIMULATOR_NAME=$SIMULATOR_NAME" >> $GITHUB_OUTPUT
          
      - name: Check for available simulators
        id: check_simulators
        run: |
          echo "Checking for available iOS simulators..."
          AVAILABLE_SIMULATORS=$(xcrun simctl list devices available | grep iPhone | wc -l)
          echo "Found $AVAILABLE_SIMULATORS iPhone simulators"
          echo "simulators_available=$AVAILABLE_SIMULATORS" >> $GITHUB_OUTPUT
          
      - name: Run Unit Tests
        if: steps.check_simulators.outputs.simulators_available > 0
        run: |
          echo "Looking for available iOS 26.0 simulators for unit tests..."
          
          # Check for iPhone 16 Pro with iOS 26.0 first (preferred)
          if xcodebuild -showdestinations -scheme "${{ env.SCHEME_NAME }}" -project "${{ env.PROJECT_NAME }}.xcodeproj" 2>/dev/null | grep -q "iPhone 16 Pro.*26.0"; then
            DESTINATION="platform=iOS Simulator,name=iPhone 16 Pro,OS=26.0"
            echo "✅ Found iPhone 16 Pro with iOS 26.0 - using preferred target for unit tests"
          # Fallback to any iPhone with iOS 26.0
          elif xcodebuild -showdestinations -scheme "${{ env.SCHEME_NAME }}" -project "${{ env.PROJECT_NAME }}.xcodeproj" 2>/dev/null | grep -q "iPhone.*26.0"; then
            # Get first available iPhone with iOS 26.0
            IPHONE_26_LINE=$(xcodebuild -showdestinations -scheme "${{ env.SCHEME_NAME }}" -project "${{ env.PROJECT_NAME }}.xcodeproj" 2>/dev/null | grep "iPhone.*26.0" | head -1)
            IPHONE_NAME=$(echo "$IPHONE_26_LINE" | grep -o 'name:[^,]*' | cut -d: -f2)
            DESTINATION="platform=iOS Simulator,name=$IPHONE_NAME,OS=26.0"
            echo "✅ Found $IPHONE_NAME with iOS 26.0 - using fallback target for unit tests"
          else
            echo "❌ No iOS 26.0 simulators found, skipping unit tests"
            exit 0
          fi
          
          echo "Running unit tests with destination: $DESTINATION"
          xcodebuild test \
            -project "${{ env.PROJECT_NAME }}.xcodeproj" \
            -scheme "${{ env.SCHEME_NAME }}" \
            -destination "$DESTINATION" \
            "-only-testing:${{ env.SCHEME_NAME }}Tests" \
            -resultBundlePath TestResults.xcresult \
            CODE_SIGNING_ALLOWED=NO \
            ONLY_ACTIVE_ARCH=YES \
            VALID_ARCHS="arm64" \
            ARCHS="arm64" \
            ENABLE_BITCODE=NO \
            IPHONEOS_DEPLOYMENT_TARGET=26.0
            
      - name: Skip Unit Tests - No Simulators Available
        if: steps.check_simulators.outputs.simulators_available == 0
        run: |
          echo "⚠️ No iOS simulators available - skipping unit tests"
          echo "This is common on GitHub Actions runners without simulator support"
            
      - name: Upload test results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: unit-test-results
          path: TestResults.xcresult
          retention-days: 30

  test-ui:
    name: UI Tests
    runs-on: macos-latest
    needs: setup
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Setup Xcode
        uses: maxim-lobanov/setup-xcode@v1
        with:
          xcode-version: ${{ env.XCODE_VERSION }}
          
      - name: Install XcodeGen
        run: |
          if ! command -v xcodegen &> /dev/null; then
            echo "Installing XcodeGen..."
            ARCH=$(uname -m)
            echo "Detected architecture: $ARCH"
            
            # Try multiple installation strategies
            INSTALL_SUCCESS=false
            
            # Strategy 1: Direct download (most reliable)
            echo "Strategy 1: Direct download from GitHub releases..."
            if curl -fsSL https://github.com/yonaskolb/XcodeGen/releases/latest/download/xcodegen.zip -o xcodegen.zip; then
              unzip -o xcodegen.zip
              sudo mv xcodegen /usr/local/bin/
              sudo chmod +x /usr/local/bin/xcodegen
              if command -v xcodegen &> /dev/null; then
                echo "✅ XcodeGen installed via direct download"
                INSTALL_SUCCESS=true
              fi
            fi
            
            # Strategy 2: Homebrew with ARM64 forcing
            if [[ "$INSTALL_SUCCESS" == false ]]; then
              echo "Strategy 2: Homebrew with ARM64 forcing..."
              if [[ "$ARCH" == "arm64" ]]; then
                # Try multiple Homebrew paths
                for brew_path in "/opt/homebrew/bin/brew" "/usr/local/bin/brew" "brew"; do
                  echo "Trying: arch -arm64 $brew_path install xcodegen"
                  if arch -arm64 $brew_path install xcodegen 2>/dev/null; then
                    echo "✅ XcodeGen installed via Homebrew ($brew_path)"
                    INSTALL_SUCCESS=true
                    break
                  fi
                done
              else
                # x86_64 systems
                if brew install xcodegen 2>/dev/null; then
                  echo "✅ XcodeGen installed via Homebrew (x86_64)"
                  INSTALL_SUCCESS=true
                fi
              fi
            fi
            
            # Strategy 3: Swift Package Manager
            if [[ "$INSTALL_SUCCESS" == false ]]; then
              echo "Strategy 3: Swift Package Manager..."
              if swift build -c release --package-path /tmp --package-url https://github.com/yonaskolb/XcodeGen.git --product xcodegen 2>/dev/null; then
                sudo mv /tmp/.build/release/xcodegen /usr/local/bin/
                echo "✅ XcodeGen installed via Swift Package Manager"
                INSTALL_SUCCESS=true
              fi
            fi
            
            # Final verification
            if [[ "$INSTALL_SUCCESS" == false ]] || ! command -v xcodegen &> /dev/null; then
              echo "❌ Failed to install XcodeGen with all strategies"
              echo "Available tools:"
              which brew || echo "brew not found"
              which swift || echo "swift not found"
              which curl || echo "curl not found"
              exit 1
            else
              echo "✅ XcodeGen installation verified: $(which xcodegen)"
              xcodegen --version
            fi
          else
            echo "✅ XcodeGen is already installed: $(which xcodegen)"
            xcodegen --version
          fi
          
      - name: Generate Xcode project
        run: |
          echo "Generating Xcode project with XcodeGen..."
          xcodegen generate
          
      - name: List available simulators
        run: |
          echo "=== Available iOS Simulators ==="
          xcrun simctl list devices available | grep iPhone || echo "No iPhone simulators found"
          echo ""
          echo "=== All Available Devices ==="
          xcrun simctl list devices available
          
      - name: Setup simulator
        run: |
          # Find the first available iPhone simulator
          echo "Searching for available iPhone simulators..."
          
          # Try different iPhone models in order of preference (most advanced first)
          for model in "iPhone 15 Pro" "iPhone 15" "iPhone 14 Pro" "iPhone 14" "iPhone 13 Pro" "iPhone 13" "iPhone 12 Pro" "iPhone 12" "iPhone 11 Pro" "iPhone 11"; do
            echo "Checking for $model..."
            if xcrun simctl list devices available | grep -q "$model"; then
              echo "Found $model simulator"
              SIMULATOR_NAME="$model"
              break
            fi
          done
          
          # If no specific model found, get the first iPhone simulator
          if [ -z "$SIMULATOR_NAME" ]; then
            echo "No specific iPhone model found, searching for any iPhone simulator..."
            SIMULATOR_NAME=$(xcrun simctl list devices available | grep iPhone | head -1 | sed 's/.*(\([^)]*\)).*/\1/')
            if [ -z "$SIMULATOR_NAME" ]; then
              echo "ERROR: No iPhone simulators found!"
              exit 1
            fi
          fi
          
          echo "Using simulator: $SIMULATOR_NAME"
          
          # Boot the simulator
          echo "Booting $SIMULATOR_NAME..."
          xcrun simctl boot "$SIMULATOR_NAME" || true
          
          # Wait a moment for boot to complete
          sleep 5
          
          # Verify simulator is booted
          echo "Verifying simulator status..."
          xcrun simctl list devices | grep "$SIMULATOR_NAME" | grep "Booted" || echo "Warning: Simulator may not be fully booted"
          echo "SIMULATOR_NAME=$SIMULATOR_NAME" >> $GITHUB_OUTPUT
          
      - name: Check for available simulators
        id: check_simulators_ui
        run: |
          echo "Checking for available iOS simulators..."
          AVAILABLE_SIMULATORS=$(xcrun simctl list devices available | grep iPhone | wc -l)
          echo "Found $AVAILABLE_SIMULATORS iPhone simulators"
          echo "simulators_available=$AVAILABLE_SIMULATORS" >> $GITHUB_OUTPUT
          
      - name: Run UI Tests
        if: steps.check_simulators_ui.outputs.simulators_available > 0
        run: |
          echo "Looking for available iOS 26.0 simulators for UI tests..."
          
          # Check for iPhone 16 Pro with iOS 26.0 first (preferred)
          if xcodebuild -showdestinations -scheme "${{ env.SCHEME_NAME }}" -project "${{ env.PROJECT_NAME }}.xcodeproj" 2>/dev/null | grep -q "iPhone 16 Pro.*26.0"; then
            DESTINATION="platform=iOS Simulator,name=iPhone 16 Pro,OS=26.0"
            echo "✅ Found iPhone 16 Pro with iOS 26.0 - using preferred target for UI tests"
          # Fallback to any iPhone with iOS 26.0
          elif xcodebuild -showdestinations -scheme "${{ env.SCHEME_NAME }}" -project "${{ env.PROJECT_NAME }}.xcodeproj" 2>/dev/null | grep -q "iPhone.*26.0"; then
            # Get first available iPhone with iOS 26.0
            IPHONE_26_LINE=$(xcodebuild -showdestinations -scheme "${{ env.SCHEME_NAME }}" -project "${{ env.PROJECT_NAME }}.xcodeproj" 2>/dev/null | grep "iPhone.*26.0" | head -1)
            IPHONE_NAME=$(echo "$IPHONE_26_LINE" | grep -o 'name:[^,]*' | cut -d: -f2)
            DESTINATION="platform=iOS Simulator,name=$IPHONE_NAME,OS=26.0"
            echo "✅ Found $IPHONE_NAME with iOS 26.0 - using fallback target for UI tests"
          else
            echo "❌ No iOS 26.0 simulators found, skipping UI tests"
            exit 0
          fi
          
          echo "Running UI tests with destination: $DESTINATION"
          xcodebuild test \
            -project "${{ env.PROJECT_NAME }}.xcodeproj" \
            -scheme "${{ env.SCHEME_NAME }}" \
            -destination "$DESTINATION" \
            "-only-testing:${{ env.SCHEME_NAME }}UITests" \
            -resultBundlePath UITestResults.xcresult \
            CODE_SIGNING_ALLOWED=NO \
            ONLY_ACTIVE_ARCH=YES \
            VALID_ARCHS="arm64" \
            ARCHS="arm64" \
            ENABLE_BITCODE=NO \
            IPHONEOS_DEPLOYMENT_TARGET=26.0
            
      - name: Skip UI Tests - No Simulators Available
        if: steps.check_simulators_ui.outputs.simulators_available == 0
        run: |
          echo "⚠️ No iOS simulators available - skipping UI tests"
          echo "This is common on GitHub Actions runners without simulator support"
            
      - name: Upload UI test results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: ui-test-results
          path: UITestResults.xcresult
          retention-days: 30

  # Deploy stage - Create release artifacts (only on main branch)
  deploy:
    name: Deploy
    runs-on: macos-latest
    needs: [lint, build, test-unit, test-ui]
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Setup Xcode
        uses: maxim-lobanov/setup-xcode@v1
        with:
          xcode-version: ${{ env.XCODE_VERSION }}
          
      - name: Install XcodeGen
        run: |
          if ! command -v xcodegen &> /dev/null; then
            echo "Installing XcodeGen..."
            ARCH=$(uname -m)
            echo "Detected architecture: $ARCH"
            
            # Try multiple installation strategies
            INSTALL_SUCCESS=false
            
            # Strategy 1: Direct download (most reliable)
            echo "Strategy 1: Direct download from GitHub releases..."
            if curl -fsSL https://github.com/yonaskolb/XcodeGen/releases/latest/download/xcodegen.zip -o xcodegen.zip; then
              unzip -o xcodegen.zip
              sudo mv xcodegen /usr/local/bin/
              sudo chmod +x /usr/local/bin/xcodegen
              if command -v xcodegen &> /dev/null; then
                echo "✅ XcodeGen installed via direct download"
                INSTALL_SUCCESS=true
              fi
            fi
            
            # Strategy 2: Homebrew with ARM64 forcing
            if [[ "$INSTALL_SUCCESS" == false ]]; then
              echo "Strategy 2: Homebrew with ARM64 forcing..."
              if [[ "$ARCH" == "arm64" ]]; then
                # Try multiple Homebrew paths
                for brew_path in "/opt/homebrew/bin/brew" "/usr/local/bin/brew" "brew"; do
                  echo "Trying: arch -arm64 $brew_path install xcodegen"
                  if arch -arm64 $brew_path install xcodegen 2>/dev/null; then
                    echo "✅ XcodeGen installed via Homebrew ($brew_path)"
                    INSTALL_SUCCESS=true
                    break
                  fi
                done
              else
                # x86_64 systems
                if brew install xcodegen 2>/dev/null; then
                  echo "✅ XcodeGen installed via Homebrew (x86_64)"
                  INSTALL_SUCCESS=true
                fi
              fi
            fi
            
            # Strategy 3: Swift Package Manager
            if [[ "$INSTALL_SUCCESS" == false ]]; then
              echo "Strategy 3: Swift Package Manager..."
              if swift build -c release --package-path /tmp --package-url https://github.com/yonaskolb/XcodeGen.git --product xcodegen 2>/dev/null; then
                sudo mv /tmp/.build/release/xcodegen /usr/local/bin/
                echo "✅ XcodeGen installed via Swift Package Manager"
                INSTALL_SUCCESS=true
              fi
            fi
            
            # Final verification
            if [[ "$INSTALL_SUCCESS" == false ]] || ! command -v xcodegen &> /dev/null; then
              echo "❌ Failed to install XcodeGen with all strategies"
              echo "Available tools:"
              which brew || echo "brew not found"
              which swift || echo "swift not found"
              which curl || echo "curl not found"
              exit 1
            else
              echo "✅ XcodeGen installation verified: $(which xcodegen)"
              xcodegen --version
            fi
          else
            echo "✅ XcodeGen is already installed: $(which xcodegen)"
            xcodegen --version
          fi
          
      - name: Generate Xcode project
        run: |
          echo "Generating Xcode project with XcodeGen..."
          xcodegen generate
          
      - name: Build Release Archive
        run: |
          # Find the best available iOS 26.0 simulator for Archive build
          echo "Looking for available iOS 26.0 simulators for Archive build..."
          
          # Check for iPhone 16 Pro with iOS 26.0 first (preferred)
          if xcodebuild -showdestinations -scheme "${{ env.SCHEME_NAME }}" -project "${{ env.PROJECT_NAME }}.xcodeproj" 2>/dev/null | grep -q "iPhone 16 Pro.*26.0"; then
            DESTINATION="platform=iOS Simulator,name=iPhone 16 Pro,OS=26.0"
            echo "✅ Found iPhone 16 Pro with iOS 26.0 - using preferred target for Archive build"
          # Fallback to any iPhone with iOS 26.0
          elif xcodebuild -showdestinations -scheme "${{ env.SCHEME_NAME }}" -project "${{ env.PROJECT_NAME }}.xcodeproj" 2>/dev/null | grep -q "iPhone.*26.0"; then
            # Get first available iPhone with iOS 26.0
            IPHONE_26_LINE=$(xcodebuild -showdestinations -scheme "${{ env.SCHEME_NAME }}" -project "${{ env.PROJECT_NAME }}.xcodeproj" 2>/dev/null | grep "iPhone.*26.0" | head -1)
            IPHONE_NAME=$(echo "$IPHONE_26_LINE" | grep -o 'name:[^,]*' | cut -d: -f2)
            DESTINATION="platform=iOS Simulator,name=$IPHONE_NAME,OS=26.0"
            echo "✅ Found $IPHONE_NAME with iOS 26.0 - using fallback target for Archive build"
          else
            echo "❌ No iOS 26.0 simulators found, skipping Archive build"
            exit 0
          fi
          
          echo "Using destination: $DESTINATION"
          xcodebuild archive \
            -project "${{ env.PROJECT_NAME }}.xcodeproj" \
            -scheme "${{ env.SCHEME_NAME }}" \
            -configuration Release \
            -destination "$DESTINATION" \
            IPHONEOS_DEPLOYMENT_TARGET=26.0  # Updated to iOS 26.0 as minimum required version \
            -archivePath "${{ env.PROJECT_NAME }}.xcarchive" \
            CODE_SIGNING_ALLOWED=NO \
            ONLY_ACTIVE_ARCH=YES \
            VALID_ARCHS="arm64" \
            ARCHS="arm64" \
            ENABLE_BITCODE=NO