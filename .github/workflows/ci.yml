name: CI

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]
    paths-ignore:
      - 'docs/**'
      - '*.md'
      - 'README.md'
      - 'CHANGELOG.md'

jobs:
  test:
    runs-on: macos-14
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        
      - name: Setup Xcode
        uses: maxim-lobanov/setup-xcode@v1
        with:
          xcode-version: latest-stable

      - name: Install coreutils for timeout
        run: brew install coreutils

      - name: Debug environment (early)
        run: |
          echo "=== Early Environment Debug ==="
          echo "Xcode version:"
          xcodebuild -version
          echo ""
          echo "Available SDKs:"
          xcodebuild -showsdks
          echo ""
          echo "All available simulators:"
          xcrun simctl list devices available
          echo ""
          echo "iPhone simulators only:"
          xcrun simctl list devices available | grep iPhone
          echo ""
          echo "iPhone 16 Pro simulators specifically:"
          xcrun simctl list devices available | grep "iPhone 16 Pro"

      - name: Cache Swift Package Manager
        uses: actions/cache@v4
        with:
          path: ~/Library/Caches/org.swift.swiftpm
          key: ${{ runner.os }}-spm-${{ hashFiles('**/Package.resolved', '**/project.pbxproj') }}
          restore-keys: |
            ${{ runner.os }}-spm-
            
      - name: Cache DerivedData
        uses: actions/cache@v4
        with:
          path: ~/Library/Developer/Xcode/DerivedData
          key: ${{ runner.os }}-deriveddata-${{ hashFiles('Sources/**/*.swift', 'Tests/**/*.swift') }}
          restore-keys: |
            ${{ runner.os }}-deriveddata-

      - name: Boot simulator
        run: |
          echo "Available iPhone simulators:"
          xcrun simctl list devices available | grep iPhone
          
          # Check for iPhone 16 Pro with iOS 18.2 first (preferred)
          if xcrun simctl list devices available | grep -q "iPhone 16 Pro.*18.2"; then
            echo "Found iPhone 16 Pro with iOS 18.2 - booting..."
            xcrun simctl boot "iPhone 16 Pro" || true
            SIMULATOR="iPhone 16 Pro"
            OS_VERSION="18.2"
          # Fallback to iPhone 16 Pro with iOS 18.1
          elif xcrun simctl list devices available | grep -q "iPhone 16 Pro.*18.1"; then
            echo "Found iPhone 16 Pro with iOS 18.1 - booting..."
            xcrun simctl boot "iPhone 16 Pro" || true
            SIMULATOR="iPhone 16 Pro"
            OS_VERSION="18.1"
          # Fallback to any iPhone 16 Pro
          elif xcrun simctl list devices available | grep -q "iPhone 16 Pro"; then
            echo "Found iPhone 16 Pro - using latest available iOS version..."
            xcrun simctl boot "iPhone 16 Pro" || true
            SIMULATOR="iPhone 16 Pro"
            OS_VERSION="18.2"  # Default to latest
          # Fallback to iPhone 15 Pro with iOS 17.x
          elif xcrun simctl list devices available | grep -q "iPhone 15 Pro"; then
            echo "Found iPhone 15 Pro - using as fallback..."
            xcrun simctl boot "iPhone 15 Pro" || true
            SIMULATOR="iPhone 15 Pro"
            OS_VERSION="17.5"  # Use latest iOS 17.x available
          else
            echo "ERROR: No suitable iPhone simulator found."
            echo "Available simulators:"
            xcrun simctl list devices available | grep iPhone
            exit 1
          fi
          
          echo "Waiting for simulator to be ready..."
          sleep 10
          echo "Simulator status:"
          xcrun simctl list devices | grep "$SIMULATOR"

      - name: Resolve packages
        run: xcodebuild -resolvePackageDependencies -project CrownAndBarrel.xcodeproj

      - name: Debug environment
        run: |
          echo "=== Environment Debug ==="
          echo "Xcode version:"
          xcodebuild -version
          echo ""
          echo "Available SDKs:"
          xcodebuild -showsdks
          echo ""
          echo "Available destinations:"
          xcodebuild -showdestinations -scheme "CrownAndBarrel" -project CrownAndBarrel.xcodeproj
          echo ""
          echo "All available simulators:"
          xcrun simctl list devices available
          echo ""
          echo "iPhone simulators only:"
          xcrun simctl list devices available | grep iPhone
          echo ""
          echo "iPhone 16 Pro simulators specifically:"
          xcrun simctl list devices available | grep "iPhone 16 Pro"
          echo ""
          echo "Simulator processes:"
          ps aux | grep Simulator || echo "No Simulator processes"
          echo ""
          echo "Memory usage:"
          vm_stat
          echo ""
          echo "Disk space:"
          df -h

      - name: Run unit tests only
        run: |
          echo "Starting unit tests..."
          
          # Use same simulator detection logic as boot step
          if xcrun simctl list devices available | grep -q "iPhone 16 Pro.*18.2"; then
            SIMULATOR="iPhone 16 Pro"
            OS_VERSION="18.2"
          elif xcrun simctl list devices available | grep -q "iPhone 16 Pro.*18.1"; then
            SIMULATOR="iPhone 16 Pro"
            OS_VERSION="18.1"
          elif xcrun simctl list devices available | grep -q "iPhone 16 Pro"; then
            SIMULATOR="iPhone 16 Pro"
            OS_VERSION="18.2"
          elif xcrun simctl list devices available | grep -q "iPhone 15 Pro"; then
            SIMULATOR="iPhone 15 Pro"
            OS_VERSION="17.5"
          else
            echo "ERROR: No suitable iPhone simulator found for testing."
            echo "Available simulators:"
            xcrun simctl list devices available | grep iPhone
            exit 1
          fi
          
          echo "Using simulator: $SIMULATOR with iOS $OS_VERSION"
          echo "Testing simulator boot status:"
          xcrun simctl list devices | grep "$SIMULATOR"
          
          # Clean up any previous test state
          echo "Cleaning up previous test state..."
          xcrun simctl shutdown "$SIMULATOR" 2>/dev/null || true
          xcrun simctl erase "$SIMULATOR" 2>/dev/null || true
          xcrun simctl boot "$SIMULATOR" || true
          sleep 5
          
          echo "Checking project and scheme..."
          xcodebuild -list -project CrownAndBarrel.xcodeproj
          
          echo "Testing basic build first..."
          xcodebuild build -project CrownAndBarrel.xcodeproj -scheme "CrownAndBarrel" -destination "platform=iOS Simulator,name=$SIMULATOR,OS=$OS_VERSION" -quiet
          
          echo "Running unit tests with comprehensive debugging and cleanup..."
          
          # First, run individual test classes to identify which one hangs
          echo "Testing individual test classes to identify hanging tests..."
          
          # List all test classes
          TEST_CLASSES=(
            "CrownAndBarrelTests.RadiusTokensTests"
            "CrownAndBarrelTests.SpacingTokensTests" 
            "CrownAndBarrelTests.HapticsTests"
            "CrownAndBarrelTests.ImageStoreCropTests"
            "CrownAndBarrelTests.LaunchConfigurationTests"
            "CrownAndBarrelTests.PhotoPipelineV2Tests"
            "CrownAndBarrelTests.AssetsPresenceTests"
            "CrownAndBarrelTests.StreakCalculatorTests"
            "CrownAndBarrelTests.ThemeDefaultingTests"
            "CrownAndBarrelTests.ThemeSystemTests"
            "CrownAndBarrelTests.WatchValidationTests"
            "CrownAndBarrelTests.WearEntryTests"
            "CrownAndBarrelTests.AchievementTests"
            "CrownAndBarrelTests.AchievementRepositoryTests"
            "CrownAndBarrelTests.WatchRepositoryGRDBTests"
          )
          
          # Test each class individually to identify any remaining issues
          for test_class in "${TEST_CLASSES[@]}"; do
            echo "Testing $test_class..."
            xcodebuild test \
              -project CrownAndBarrel.xcodeproj \
              -scheme "CrownAndBarrel" \
              -destination "platform=iOS Simulator,name=$SIMULATOR,OS=$OS_VERSION" \
              -only-testing:"$test_class" \
              -disableAutomaticPackageResolution \
              -parallel-testing-enabled NO \
              -quiet || {
                echo "❌ Test class $test_class failed"
                echo "This test class needs attention"
              }
          done
          
          echo "Running all unit tests..."
          # Run all tests with comprehensive debugging
          xcodebuild test \
            -project CrownAndBarrel.xcodeproj \
            -scheme "CrownAndBarrel" \
            -destination "platform=iOS Simulator,name=$SIMULATOR,OS=$OS_VERSION" \
            -only-testing:CrownAndBarrelTests \
            -disableAutomaticPackageResolution \
            -parallel-testing-enabled NO \
            -resultBundlePath TestResults.xcresult \
            -enableCodeCoverage NO \
            -derivedDataPath ~/Library/Developer/Xcode/DerivedData/CrownAndBarrel-CI
          
          # Clean up after tests
          echo "Cleaning up after tests..."
          xcrun simctl shutdown "$SIMULATOR" 2>/dev/null || true
          
          echo "Unit tests completed successfully!"