name: CI

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]
    paths-ignore:
      - 'docs/**'
      - '*.md'
      - 'README.md'
      - 'CHANGELOG.md'

jobs:
  test:
    runs-on: macos-14
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        
      - name: Setup Xcode
        uses: maxim-lobanov/setup-xcode@v1
        with:
          xcode-version: latest-stable

      - name: Install coreutils for timeout
        run: brew install coreutils

      - name: Debug environment (early)
        run: |
          echo "=== Early Environment Debug ==="
          echo "Xcode version:"
          xcodebuild -version
          echo ""
          echo "Available SDKs:"
          xcodebuild -showsdks
          echo ""
          echo "All available simulators:"
          xcrun simctl list devices available
          echo ""
          echo "iPhone simulators only:"
          xcrun simctl list devices available | grep iPhone
          echo ""
          echo "iPhone 16 Pro simulators specifically:"
          xcrun simctl list devices available | grep "iPhone 16 Pro"

      - name: Cache Swift Package Manager
        uses: actions/cache@v4
        with:
          path: ~/Library/Caches/org.swift.swiftpm
          key: ${{ runner.os }}-spm-${{ hashFiles('**/Package.resolved', '**/project.pbxproj') }}
          restore-keys: |
            ${{ runner.os }}-spm-
            
      - name: Cache DerivedData
        uses: actions/cache@v4
        with:
          path: ~/Library/Developer/Xcode/DerivedData
          key: ${{ runner.os }}-deriveddata-${{ hashFiles('Sources/**/*.swift', 'Tests/**/*.swift', 'project.yml') }}
          restore-keys: |
            ${{ runner.os }}-deriveddata-
            
      - name: Cache ModuleCache
        uses: actions/cache@v4
        with:
          path: ~/Library/Developer/Xcode/ModuleCache.noindex
          key: ${{ runner.os }}-modulecache-${{ hashFiles('Sources/**/*.swift', 'Tests/**/*.swift') }}
          restore-keys: |
            ${{ runner.os }}-modulecache-

      - name: Boot simulator
        run: |
          echo "Available iPhone simulators:"
          xcrun simctl list devices available | grep iPhone
          
          # Get simulator ID for iPhone 16 Pro with iOS 18.4 first (preferred)
          SIMULATOR_ID=$(xcrun simctl list devices available | grep -A 5 "iOS 18.4" | grep "iPhone 16 Pro" | head -1 | sed 's/.*(\([A-F0-9-]*\)).*/\1/')
          if [ -n "$SIMULATOR_ID" ]; then
            echo "Found iPhone 16 Pro with iOS 18.4 (ID: $SIMULATOR_ID) - booting..."
            SIMULATOR="iPhone 16 Pro"
            OS_VERSION="18.4"
          # Fallback to iPhone 16 Pro with iOS 18.5
          else
            SIMULATOR_ID=$(xcrun simctl list devices available | grep -A 5 "iOS 18.5" | grep "iPhone 16 Pro" | head -1 | sed 's/.*(\([A-F0-9-]*\)).*/\1/')
            if [ -n "$SIMULATOR_ID" ]; then
              echo "Found iPhone 16 Pro with iOS 18.5 (ID: $SIMULATOR_ID) - booting..."
              SIMULATOR="iPhone 16 Pro"
              OS_VERSION="18.5"
            # Fallback to iPhone 16 Pro with iOS 18.6
            else
              SIMULATOR_ID=$(xcrun simctl list devices available | grep -A 5 "iOS 18.6" | grep "iPhone 16 Pro" | head -1 | sed 's/.*(\([A-F0-9-]*\)).*/\1/')
              if [ -n "$SIMULATOR_ID" ]; then
                echo "Found iPhone 16 Pro with iOS 18.6 (ID: $SIMULATOR_ID) - booting..."
                SIMULATOR="iPhone 16 Pro"
                OS_VERSION="18.6"
              # Fallback to any iPhone 16 Pro
              else
                SIMULATOR_ID=$(xcrun simctl list devices available | grep "iPhone 16 Pro" | head -1 | sed 's/.*(\([A-F0-9-]*\)).*/\1/')
                if [ -n "$SIMULATOR_ID" ]; then
                  echo "Found iPhone 16 Pro (ID: $SIMULATOR_ID) - using latest available iOS version..."
                  SIMULATOR="iPhone 16 Pro"
                  OS_VERSION="18.6"  # Default to latest available
                # Fallback to iPhone 15 Pro with iOS 17.x
                else
                  SIMULATOR_ID=$(xcrun simctl list devices available | grep "iPhone 15 Pro" | head -1 | sed 's/.*(\([A-F0-9-]*\)).*/\1/')
                  if [ -n "$SIMULATOR_ID" ]; then
                    echo "Found iPhone 15 Pro (ID: $SIMULATOR_ID) - using as fallback..."
                    SIMULATOR="iPhone 15 Pro"
                    OS_VERSION="17.5"  # Use latest iOS 17.x available
                  else
                    echo "ERROR: No suitable iPhone simulator found."
                    echo "Available simulators:"
                    xcrun simctl list devices available | grep iPhone
                    exit 1
                  fi
                fi
              fi
            fi
          fi
          
          # Ensure simulator is properly booted
          echo "Ensuring simulator is booted..."
          xcrun simctl shutdown "$SIMULATOR_ID" 2>/dev/null || true
          xcrun simctl erase "$SIMULATOR_ID" 2>/dev/null || true
          xcrun simctl boot "$SIMULATOR_ID"
          
          # Wait for simulator to be fully ready
          echo "Waiting for simulator to be ready..."
          sleep 15
          
          # Verify simulator is booted and ready
          echo "Verifying simulator status..."
          SIMULATOR_STATUS=$(xcrun simctl list devices | grep "$SIMULATOR_ID" | grep -o "(Booted)")
          if [ "$SIMULATOR_STATUS" != "(Booted)" ]; then
            echo "ERROR: Simulator $SIMULATOR_ID failed to boot properly"
            echo "Simulator status:"
            xcrun simctl list devices | grep "$SIMULATOR_ID"
            exit 1
          fi
          
          echo "Simulator $SIMULATOR_ID is ready and booted"

      - name: Resolve packages
        run: xcodebuild -resolvePackageDependencies -project CrownAndBarrel.xcodeproj
        
      - name: Clean build artifacts
        run: |
          echo "Cleaning build artifacts for faster builds..."
          rm -rf ~/Library/Developer/Xcode/DerivedData/CrownAndBarrel-*
          rm -rf ~/Library/Developer/Xcode/ModuleCache.noindex/*
          xcodebuild clean -project CrownAndBarrel.xcodeproj -scheme CrownAndBarrel

      - name: Debug environment
        run: |
          echo "=== Environment Debug ==="
          echo "Xcode version:"
          xcodebuild -version
          echo ""
          echo "Available SDKs:"
          xcodebuild -showsdks
          echo ""
          echo "Available destinations:"
          xcodebuild -showdestinations -scheme "CrownAndBarrel" -project CrownAndBarrel.xcodeproj
          echo ""
          echo "All available simulators:"
          xcrun simctl list devices available
          echo ""
          echo "iPhone simulators only:"
          xcrun simctl list devices available | grep iPhone
          echo ""
          echo "iPhone 16 Pro simulators specifically:"
          xcrun simctl list devices available | grep "iPhone 16 Pro"
          echo ""
          echo "Simulator processes:"
          ps aux | grep Simulator || echo "No Simulator processes"
          echo ""
          echo "Memory usage:"
          vm_stat
          echo ""
          echo "Disk space:"
          df -h

      - name: Run unit tests only
        run: |
          echo "Starting unit tests..."
          
          # Use same simulator detection logic as boot step
          SIMULATOR_ID=$(xcrun simctl list devices available | grep -A 5 "iOS 18.4" | grep "iPhone 16 Pro" | head -1 | sed 's/.*(\([A-F0-9-]*\)).*/\1/')
          if [ -n "$SIMULATOR_ID" ]; then
            SIMULATOR="iPhone 16 Pro"
            OS_VERSION="18.4"
          else
            SIMULATOR_ID=$(xcrun simctl list devices available | grep -A 5 "iOS 18.5" | grep "iPhone 16 Pro" | head -1 | sed 's/.*(\([A-F0-9-]*\)).*/\1/')
            if [ -n "$SIMULATOR_ID" ]; then
              SIMULATOR="iPhone 16 Pro"
              OS_VERSION="18.5"
            else
              SIMULATOR_ID=$(xcrun simctl list devices available | grep -A 5 "iOS 18.6" | grep "iPhone 16 Pro" | head -1 | sed 's/.*(\([A-F0-9-]*\)).*/\1/')
              if [ -n "$SIMULATOR_ID" ]; then
                SIMULATOR="iPhone 16 Pro"
                OS_VERSION="18.6"
              else
                SIMULATOR_ID=$(xcrun simctl list devices available | grep "iPhone 16 Pro" | head -1 | sed 's/.*(\([A-F0-9-]*\)).*/\1/')
                if [ -n "$SIMULATOR_ID" ]; then
                  SIMULATOR="iPhone 16 Pro"
                  OS_VERSION="18.6"
                else
                  SIMULATOR_ID=$(xcrun simctl list devices available | grep "iPhone 15 Pro" | head -1 | sed 's/.*(\([A-F0-9-]*\)).*/\1/')
                  if [ -n "$SIMULATOR_ID" ]; then
                    SIMULATOR="iPhone 15 Pro"
                    OS_VERSION="17.5"
                  else
                    echo "ERROR: No suitable iPhone simulator found for testing."
                    echo "Available simulators:"
                    xcrun simctl list devices available | grep iPhone
                    exit 1
                  fi
                fi
              fi
            fi
          fi
          
          echo "Using simulator: $SIMULATOR (ID: $SIMULATOR_ID) with iOS $OS_VERSION"
          echo "Testing simulator boot status:"
          xcrun simctl list devices | grep "$SIMULATOR_ID"
          
          # Ensure simulator is booted before testing
          echo "Ensuring simulator is booted for testing..."
          SIMULATOR_STATUS=$(xcrun simctl list devices | grep "$SIMULATOR_ID" | grep -o "(Booted)")
          if [ "$SIMULATOR_STATUS" != "(Booted)" ]; then
            echo "Simulator is not booted, booting now..."
            xcrun simctl shutdown "$SIMULATOR_ID" 2>/dev/null || true
            xcrun simctl erase "$SIMULATOR_ID" 2>/dev/null || true
            xcrun simctl boot "$SIMULATOR_ID"
            sleep 10
          fi
          
          # Verify simulator is ready
          SIMULATOR_STATUS=$(xcrun simctl list devices | grep "$SIMULATOR_ID" | grep -o "(Booted)")
          if [ "$SIMULATOR_STATUS" != "(Booted)" ]; then
            echo "ERROR: Simulator $SIMULATOR_ID failed to boot for testing"
            echo "Simulator status:"
            xcrun simctl list devices | grep "$SIMULATOR_ID"
            exit 1
          fi
          
          echo "Simulator is ready for testing"
          
          echo "Checking project and scheme..."
          xcodebuild -list -project CrownAndBarrel.xcodeproj
          
          echo "Testing basic build first..."
          xcodebuild build -project CrownAndBarrel.xcodeproj -scheme "CrownAndBarrel" -destination "platform=iOS Simulator,id=$SIMULATOR_ID" -quiet
          
          echo "Running all unit tests with optimizations..."
          # Run all tests together for better performance
          xcodebuild test \
            -project CrownAndBarrel.xcodeproj \
            -scheme "CrownAndBarrel" \
            -destination "platform=iOS Simulator,id=$SIMULATOR_ID" \
            -only-testing:CrownAndBarrelTests \
            -disableAutomaticPackageResolution \
            -parallel-testing-enabled YES \
            -maximum-concurrent-test-simulator-destinations 1 \
            -maximum-concurrent-test-device-destinations 1 \
            -resultBundlePath TestResults.xcresult \
            -enableCodeCoverage NO \
            -derivedDataPath ~/Library/Developer/Xcode/DerivedData/CrownAndBarrel-CI
          
          # Clean up after tests
          echo "Cleaning up after tests..."
          xcrun simctl shutdown "$SIMULATOR_ID" 2>/dev/null || true
          
          echo "Unit tests completed successfully!"