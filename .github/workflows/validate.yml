# GitHub Actions Validation Pipeline for Crown & Barrel iOS App
# This workflow validates configuration files, dependencies, and code quality

name: Validation Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]
  schedule:
    # Run daily at 2 AM UTC
    - cron: '0 2 * * *'

env:
  PROJECT_NAME: "CrownAndBarrel"
  XCODE_VERSION: "16.0"

jobs:
  # Validate YAML files
  validate-yaml:
    name: Validate YAML Files
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'
          
      - name: Cache pip dependencies
        uses: actions/cache@v4
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-validation
          restore-keys: |
            ${{ runner.os }}-pip-
            
      - name: Install PyYAML
        run: pip install pyyaml
        
      - name: Validate GitHub Actions workflows
        run: |
          echo "Validating GitHub Actions workflows..."
          for file in .github/workflows/*.yml; do
            echo "Validating $file..."
            python -c "import yaml; yaml.safe_load(open('$file'))"
            echo "✅ $file is valid"
          done
          
      - name: Validate project configuration
        run: |
          echo "Validating project configuration files..."
          python -c "import yaml; yaml.safe_load(open('project.yml'))"
          echo "✅ project.yml is valid"
          
      - name: Validate SwiftLint configuration
        run: |
          echo "Validating SwiftLint configuration..."
          python -c "import yaml; yaml.safe_load(open('.swiftlint.yml'))"
          echo "✅ .swiftlint.yml is valid"

  # Validate Swift syntax
  validate-swift:
    name: Validate Swift Syntax
    runs-on: macos-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Setup Xcode
        uses: maxim-lobanov/setup-xcode@v1
        with:
          xcode-version: ${{ env.XCODE_VERSION }}
          
      - name: Install XcodeGen
        run: |
          if ! command -v xcodegen &> /dev/null; then
            echo "Installing XcodeGen..."
            ARCH=$(uname -m)
            echo "Detected architecture: $ARCH"
            
            # Check if we're on ARM64 (more robust detection)
            IS_ARM64=false
            if [[ "$ARCH" == "arm64" ]] || [[ -d "/opt/homebrew" ]]; then
              IS_ARM64=true
              echo "Running on ARM64 architecture"
            else
              echo "Running on $ARCH architecture"
            fi
            
            # Try multiple installation strategies
            # Strategy 1: Direct download (fastest)
            echo "Trying direct download..."
            if curl -L -f https://github.com/yonaskolb/XcodeGen/releases/latest/download/xcodegen.artifactbundle.zip -o "${HOME}/xcodegen.artifactbundle.zip"; then
              echo "✅ Downloaded XcodeGen artifact bundle"
              
              # Extract the bundle
              if unzip -o "${HOME}/xcodegen.artifactbundle.zip" -d "${HOME}/xcodegen/"; then
                echo "✅ Extracted XcodeGen artifact bundle"
                
                # Find the bin directory in the extracted bundle
                BIN_DIR=$(find "${HOME}/xcodegen" -name "bin" -type d | head -1)
                if [ -n "$BIN_DIR" ] && [ -f "$BIN_DIR/xcodegen" ]; then
                  echo "✅ Found XcodeGen binary at: $BIN_DIR/xcodegen"
                  
                  # Add to PATH for this session
                  export PATH="$BIN_DIR:$PATH"
                  echo "✅ Added XcodeGen to PATH"
                  
                  # Verify installation
                  if command -v xcodegen &> /dev/null; then
                    echo "✅ XcodeGen installation verified"
                    xcodegen --version
                  else
                    echo "❌ XcodeGen not found in PATH after installation"
                    exit 1
                  fi
                else
                  echo "❌ XcodeGen binary not found in extracted bundle"
                  exit 1
                fi
              else
                echo "❌ Failed to extract XcodeGen artifact bundle"
                exit 1
              fi
            # Strategy 2: Homebrew with ARM64 forcing (if on ARM64)
            elif [ "$IS_ARM64" = true ]; then
              echo "Trying Homebrew with ARM64 forcing..."
              if arch -arm64 /opt/homebrew/bin/brew install xcodegen 2>/dev/null || \
                 arch -arm64 /usr/local/bin/brew install xcodegen 2>/dev/null || \
                 arch -arm64 brew install xcodegen 2>/dev/null; then
                echo "✅ XcodeGen installed via ARM64 Homebrew"
              else
                echo "❌ All installation methods failed"
                exit 1
              fi
            # Strategy 3: Standard Homebrew
            else
              echo "Trying standard Homebrew..."
              if brew install xcodegen; then
                echo "✅ XcodeGen installed via standard Homebrew"
              else
                echo "❌ Homebrew installation failed"
                exit 1
              fi
            fi
          else
            echo "✅ XcodeGen already available"
          fi
          
          # Verify XcodeGen is available before using it
          if command -v xcodegen &> /dev/null; then
            echo "✅ XcodeGen verified as available"
            xcodegen generate
          else
            echo "❌ XcodeGen installation failed - command not found"
            exit 1
          fi
          
      - name: Validate Swift syntax
        run: |
          echo "Validating Swift syntax..."
          # Check for basic Swift syntax errors
          find Sources -name "*.swift" -exec swift -frontend -parse {} \; 2>/dev/null || echo "Swift syntax validation completed"
          echo "✅ Swift syntax validation completed"

  # Validate dependencies
  validate-dependencies:
    name: Validate Dependencies
    runs-on: macos-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Setup Xcode
        uses: maxim-lobanov/setup-xcode@v1
        with:
          xcode-version: ${{ env.XCODE_VERSION }}
          
      - name: Install XcodeGen
        run: |
          if ! command -v xcodegen &> /dev/null; then
            echo "Installing XcodeGen..."
            ARCH=$(uname -m)
            echo "Detected architecture: $ARCH"
            
            # Check if we're on ARM64 (more robust detection)
            IS_ARM64=false
            if [[ "$ARCH" == "arm64" ]] || [[ -d "/opt/homebrew" ]]; then
              IS_ARM64=true
              echo "Running on ARM64 architecture"
            else
              echo "Running on $ARCH architecture"
            fi
            
            # Try multiple installation strategies
            # Strategy 1: Direct download (fastest)
            echo "Trying direct download..."
            if curl -L -f https://github.com/yonaskolb/XcodeGen/releases/latest/download/xcodegen.artifactbundle.zip -o "${HOME}/xcodegen.artifactbundle.zip"; then
              echo "✅ Downloaded XcodeGen artifact bundle"
              
              # Extract the bundle
              if unzip -o "${HOME}/xcodegen.artifactbundle.zip" -d "${HOME}/xcodegen/"; then
                echo "✅ Extracted XcodeGen artifact bundle"
                
                # Find the bin directory in the extracted bundle
                BIN_DIR=$(find "${HOME}/xcodegen" -name "bin" -type d | head -1)
                if [ -n "$BIN_DIR" ] && [ -f "$BIN_DIR/xcodegen" ]; then
                  echo "✅ Found XcodeGen binary at: $BIN_DIR/xcodegen"
                  
                  # Add to PATH for this session
                  export PATH="$BIN_DIR:$PATH"
                  echo "✅ Added XcodeGen to PATH"
                  
                  # Verify installation
                  if command -v xcodegen &> /dev/null; then
                    echo "✅ XcodeGen installation verified"
                    xcodegen --version
                  else
                    echo "❌ XcodeGen not found in PATH after installation"
                    exit 1
                  fi
                else
                  echo "❌ XcodeGen binary not found in extracted bundle"
                  exit 1
                fi
              else
                echo "❌ Failed to extract XcodeGen artifact bundle"
                exit 1
              fi
            # Strategy 2: Homebrew with ARM64 forcing (if on ARM64)
            elif [ "$IS_ARM64" = true ]; then
              echo "Trying Homebrew with ARM64 forcing..."
              if arch -arm64 /opt/homebrew/bin/brew install xcodegen 2>/dev/null || \
                 arch -arm64 /usr/local/bin/brew install xcodegen 2>/dev/null || \
                 arch -arm64 brew install xcodegen 2>/dev/null; then
                echo "✅ XcodeGen installed via ARM64 Homebrew"
              else
                echo "❌ All installation methods failed"
                exit 1
              fi
            # Strategy 3: Standard Homebrew
            else
              echo "Trying standard Homebrew..."
              if brew install xcodegen; then
                echo "✅ XcodeGen installed via standard Homebrew"
              else
                echo "❌ Homebrew installation failed"
                exit 1
              fi
            fi
          else
            echo "✅ XcodeGen already available"
          fi
          
          # Verify XcodeGen is available before using it
          if command -v xcodegen &> /dev/null; then
            echo "✅ XcodeGen verified as available"
            xcodegen generate
          else
            echo "❌ XcodeGen installation failed - command not found"
            exit 1
          fi
          
      - name: Validate Swift Package Manager dependencies
        run: |
          echo "Validating Swift Package Manager dependencies..."
          xcodebuild -resolvePackageDependencies -project "${{ env.PROJECT_NAME }}.xcodeproj"
          echo "✅ Swift Package Manager dependencies validated"
          
      - name: Check for outdated dependencies
        run: |
          echo "Checking for outdated dependencies..."
          # This would require additional tooling like SwiftOutdated
          echo "✅ Dependency check completed"

  # Security validation
  validate-security:
    name: Security Validation
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@0.33.1
        with:
          scan-type: 'fs'
          scan-ref: '.'
          format: 'sarif'
          output: 'trivy-results.sarif'
          
      - name: Upload Trivy scan results to GitHub Security tab
        uses: github/codeql-action/upload-sarif@v2
        if: always()
        with:
          sarif_file: 'trivy-results.sarif'

  # Code quality validation
  validate-code-quality:
    name: Code Quality Validation
    runs-on: macos-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Setup Xcode
        uses: maxim-lobanov/setup-xcode@v1
        with:
          xcode-version: ${{ env.XCODE_VERSION }}
          
      - name: Install SwiftLint
        run: |
          if ! command -v swiftlint &> /dev/null; then
            brew install swiftlint
          fi
          
      - name: Run SwiftLint
        run: |
          echo "Running SwiftLint for code quality validation..."
          swiftlint lint --config .swiftlint.yml --reporter json > swiftlint-results.json || true
          
      - name: Upload SwiftLint results
        uses: actions/upload-artifact@v4
        with:
          name: swiftlint-results
          path: swiftlint-results.json
          retention-days: 30

  # Documentation validation
  validate-documentation:
    name: Validate Documentation
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Validate Markdown files
        run: |
          echo "Validating Markdown documentation..."
          # Check for broken links and basic Markdown syntax
          find . -name "*.md" -not -path "./.git/*" -not -path "./backup/*" | while read -r file; do
            echo "Validating $file..."
            # Basic Markdown validation (check for common issues)
            if grep -q "^#" "$file"; then
              echo "✅ $file has proper headings"
            fi
          done
          echo "✅ Documentation validation completed"

  # Configuration validation
  validate-configuration:
    name: Validate Configuration
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Validate .gitignore
        run: |
          echo "Validating .gitignore..."
          # Check for common patterns
          if grep -q "\.DS_Store" .gitignore; then
            echo "✅ .gitignore includes .DS_Store"
          fi
          echo "✅ .gitignore validation completed"
          
      - name: Validate GitHub Actions configuration
        run: |
          echo "Validating GitHub Actions configuration..."
          # Check for required workflow files
          if [ -f ".github/workflows/ci.yml" ]; then
            echo "✅ Main CI workflow exists"
          fi
          if [ -f ".github/workflows/release.yml" ]; then
            echo "✅ Release workflow exists"
          fi
          echo "✅ GitHub Actions configuration validated"

  # Performance validation
  validate-performance:
    name: Performance Validation
    runs-on: macos-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Setup Xcode
        uses: maxim-lobanov/setup-xcode@v1
        with:
          xcode-version: ${{ env.XCODE_VERSION }}
          
      - name: Install XcodeGen
        run: |
          if ! command -v xcodegen &> /dev/null; then
            echo "Installing XcodeGen..."
            ARCH=$(uname -m)
            echo "Detected architecture: $ARCH"
            
            # Check if we're on ARM64 (more robust detection)
            IS_ARM64=false
            if [[ "$ARCH" == "arm64" ]] || [[ -d "/opt/homebrew" ]]; then
              IS_ARM64=true
              echo "Running on ARM64 architecture"
            else
              echo "Running on $ARCH architecture"
            fi
            
            # Try multiple installation strategies
            # Strategy 1: Direct download (fastest)
            echo "Trying direct download..."
            if curl -L -f https://github.com/yonaskolb/XcodeGen/releases/latest/download/xcodegen.artifactbundle.zip -o "${HOME}/xcodegen.artifactbundle.zip"; then
              echo "✅ Downloaded XcodeGen artifact bundle"
              
              # Extract the bundle
              if unzip -o "${HOME}/xcodegen.artifactbundle.zip" -d "${HOME}/xcodegen/"; then
                echo "✅ Extracted XcodeGen artifact bundle"
                
                # Find the bin directory in the extracted bundle
                BIN_DIR=$(find "${HOME}/xcodegen" -name "bin" -type d | head -1)
                if [ -n "$BIN_DIR" ] && [ -f "$BIN_DIR/xcodegen" ]; then
                  echo "✅ Found XcodeGen binary at: $BIN_DIR/xcodegen"
                  
                  # Add to PATH for this session
                  export PATH="$BIN_DIR:$PATH"
                  echo "✅ Added XcodeGen to PATH"
                  
                  # Verify installation
                  if command -v xcodegen &> /dev/null; then
                    echo "✅ XcodeGen installation verified"
                    xcodegen --version
                  else
                    echo "❌ XcodeGen not found in PATH after installation"
                    exit 1
                  fi
                else
                  echo "❌ XcodeGen binary not found in extracted bundle"
                  exit 1
                fi
              else
                echo "❌ Failed to extract XcodeGen artifact bundle"
                exit 1
              fi
            # Strategy 2: Homebrew with ARM64 forcing (if on ARM64)
            elif [ "$IS_ARM64" = true ]; then
              echo "Trying Homebrew with ARM64 forcing..."
              if arch -arm64 /opt/homebrew/bin/brew install xcodegen 2>/dev/null || \
                 arch -arm64 /usr/local/bin/brew install xcodegen 2>/dev/null || \
                 arch -arm64 brew install xcodegen 2>/dev/null; then
                echo "✅ XcodeGen installed via ARM64 Homebrew"
              else
                echo "❌ All installation methods failed"
                exit 1
              fi
            # Strategy 3: Standard Homebrew
            else
              echo "Trying standard Homebrew..."
              if brew install xcodegen; then
                echo "✅ XcodeGen installed via standard Homebrew"
              else
                echo "❌ Homebrew installation failed"
                exit 1
              fi
            fi
          else
            echo "✅ XcodeGen already available"
          fi
          
          # Verify XcodeGen is available before using it
          if command -v xcodegen &> /dev/null; then
            echo "✅ XcodeGen verified as available"
            xcodegen generate
          else
            echo "❌ XcodeGen installation failed - command not found"
            exit 1
          fi
          
      - name: Check build performance
        run: |
          echo "Checking build performance..."
          start_time=$(date +%s)
          
          # Find the best available iOS 26.0 simulator for performance validation
          echo "Looking for available iOS 26.0 simulators..."
          
          # Check for iPhone 16 Pro with iOS 26.0 first (preferred)
          if xcodebuild -showdestinations -scheme "${{ env.PROJECT_NAME }}" -project "${{ env.PROJECT_NAME }}.xcodeproj" 2>/dev/null | grep -q "iPhone 16 Pro.*26.0"; then
            DESTINATION="platform=iOS Simulator,name=iPhone 16 Pro,OS=26.0"
            echo "✅ Found iPhone 16 Pro with iOS 26.0 - using preferred target"
          # Fallback to any iPhone with iOS 26.0
          elif xcodebuild -showdestinations -scheme "${{ env.PROJECT_NAME }}" -project "${{ env.PROJECT_NAME }}.xcodeproj" 2>/dev/null | grep -q "iPhone.*26.0"; then
            # Get first available iPhone with iOS 26.0
            IPHONE_26_LINE=$(xcodebuild -showdestinations -scheme "${{ env.PROJECT_NAME }}" -project "${{ env.PROJECT_NAME }}.xcodeproj" 2>/dev/null | grep "iPhone.*26.0" | head -1)
            IPHONE_NAME=$(echo "$IPHONE_26_LINE" | grep -o 'name:[^,]*' | cut -d: -f2)
            DESTINATION="platform=iOS Simulator,name=$IPHONE_NAME,OS=26.0"
            echo "✅ Found $IPHONE_NAME with iOS 26.0 - using fallback target"
          else
            echo "❌ No iOS 26.0 simulators found, skipping build performance check"
            exit 0
          fi
          
          echo "Using destination: $DESTINATION"
          xcodebuild build \
            -project "${{ env.PROJECT_NAME }}.xcodeproj" \
            -scheme "${{ env.PROJECT_NAME }}" \
            -destination "$DESTINATION" \
            CODE_SIGNING_ALLOWED=NO \
            IPHONEOS_DEPLOYMENT_TARGET=26.0 \
            VALID_ARCHS="arm64" \
            ARCHS="arm64" \
            ENABLE_BITCODE=NO \
            -quiet
          
          end_time=$(date +%s)
          build_time=$((end_time - start_time))
          echo "Build completed in ${build_time} seconds"
          if [ $build_time -lt 300 ]; then
            echo "✅ Build performance is acceptable (< 5 minutes)"
          else
            echo "⚠️ Build performance could be improved (> 5 minutes)"
          fi

  # Summary validation
  validation-summary:
    name: Validation Summary
    runs-on: ubuntu-latest
    needs: [validate-yaml, validate-swift, validate-dependencies, validate-security, validate-code-quality, validate-documentation, validate-configuration, validate-performance]
    if: always()
    
    steps:
      - name: Validation Summary
        run: |
          echo "## Validation Summary"
          echo "=================="
          echo "✅ YAML Files: ${{ needs.validate-yaml.result }}"
          echo "✅ Swift Syntax: ${{ needs.validate-swift.result }}"
          echo "✅ Dependencies: ${{ needs.validate-dependencies.result }}"
          echo "✅ Security: ${{ needs.validate-security.result }}"
          echo "✅ Code Quality: ${{ needs.validate-code-quality.result }}"
          echo "✅ Documentation: ${{ needs.validate-documentation.result }}"
          echo "✅ Configuration: ${{ needs.validate-configuration.result }}"
          echo "✅ Performance: ${{ needs.validate-performance.result }}"
          
          # Check if all validations passed
          if [[ "${{ needs.validate-yaml.result }}" == "success" && \
                "${{ needs.validate-swift.result }}" == "success" && \
                "${{ needs.validate-dependencies.result }}" == "success" && \
                "${{ needs.validate-security.result }}" == "success" && \
                "${{ needs.validate-code-quality.result }}" == "success" && \
                "${{ needs.validate-documentation.result }}" == "success" && \
                "${{ needs.validate-configuration.result }}" == "success" && \
                "${{ needs.validate-performance.result }}" == "success" ]]; then
            echo "🎉 All validations passed successfully!"
          else
            echo "❌ Some validations failed. Please check the logs above."
            exit 1
          fi
