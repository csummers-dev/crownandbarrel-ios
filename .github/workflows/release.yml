# GitHub Actions Release Pipeline for Crown & Barrel iOS App
# This workflow handles TestFlight and App Store deployments

name: Release Pipeline

on:
  push:
    tags:
      - 'v*'
  workflow_dispatch:
    inputs:
      release_type:
        description: 'Release type'
        required: true
        default: 'testflight'
        type: choice
        options:
          - testflight
          - appstore

env:
  # Project variables
  PROJECT_NAME: "CrownAndBarrel"
  SCHEME_NAME: "CrownAndBarrel"
  BUNDLE_ID: "com.crownandbarrel.app"
  
  # Build settings
  ARCHIVE_CONFIGURATION: "Release"
  XCODE_VERSION: "16.0"

jobs:
  # TestFlight Deployment
  deploy-testflight:
    name: Deploy to TestFlight
    runs-on: macos-latest
    if: github.event_name == 'push' || github.event.inputs.release_type == 'testflight'
    environment: testflight
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Setup Xcode
        uses: maxim-lobanov/setup-xcode@v1
        with:
          xcode-version: ${{ env.XCODE_VERSION }}
          
      - name: Install XcodeGen
        run: |
          if ! command -v xcodegen &> /dev/null; then
            echo "Installing XcodeGen..."
            ARCH=$(uname -m)
            echo "Detected architecture: $ARCH"
            
            # Check if we're on ARM64 (more robust detection)
            IS_ARM64=false
            if [[ "$ARCH" == "arm64" ]] || [[ -d "/opt/homebrew" ]]; then
              IS_ARM64=true
              echo "Running on ARM64 architecture"
            else
              echo "Running on $ARCH architecture"
            fi
            
            # Try multiple installation strategies
            # Strategy 1: Direct download (fastest)
            echo "Trying direct download..."
            if curl -L -f https://github.com/yonaskolb/XcodeGen/releases/latest/download/xcodegen.artifactbundle.zip -o "${HOME}/xcodegen.artifactbundle.zip"; then
              echo "‚úÖ Downloaded XcodeGen artifact bundle"
              
              # Extract the bundle
              if unzip -o "${HOME}/xcodegen.artifactbundle.zip" -d "${HOME}/xcodegen/"; then
                echo "‚úÖ Extracted XcodeGen artifact bundle"
                
                # Find the bin directory in the extracted bundle
                BIN_DIR=$(find "${HOME}/xcodegen" -name "bin" -type d | head -1)
                if [ -n "$BIN_DIR" ] && [ -f "$BIN_DIR/xcodegen" ]; then
                  echo "‚úÖ Found XcodeGen binary at: $BIN_DIR/xcodegen"
                  
                  # Add to PATH for this session
                  export PATH="$BIN_DIR:$PATH"
                  echo "‚úÖ Added XcodeGen to PATH"
                  
                  # Verify installation
                  if command -v xcodegen &> /dev/null; then
                    echo "‚úÖ XcodeGen installation verified"
                    xcodegen --version
                  else
                    echo "‚ùå XcodeGen not found in PATH after installation"
                    exit 1
                  fi
                else
                  echo "‚ùå XcodeGen binary not found in extracted bundle"
                  exit 1
                fi
              else
                echo "‚ùå Failed to extract XcodeGen artifact bundle"
                exit 1
              fi
            # Strategy 2: Homebrew with ARM64 forcing (if on ARM64)
            elif [ "$IS_ARM64" = true ]; then
              echo "Trying Homebrew with ARM64 forcing..."
              if arch -arm64 /opt/homebrew/bin/brew install xcodegen 2>/dev/null || \
                 arch -arm64 /usr/local/bin/brew install xcodegen 2>/dev/null || \
                 arch -arm64 brew install xcodegen 2>/dev/null; then
                echo "‚úÖ XcodeGen installed via ARM64 Homebrew"
              else
                echo "‚ùå All installation methods failed"
                exit 1
              fi
            # Strategy 3: Standard Homebrew
            else
              echo "Trying standard Homebrew..."
              if brew install xcodegen; then
                echo "‚úÖ XcodeGen installed via standard Homebrew"
              else
                echo "‚ùå Homebrew installation failed"
                exit 1
              fi
            fi
          else
            echo "‚úÖ XcodeGen already available"
          fi
          
          # Verify XcodeGen is available before using it
          if command -v xcodegen &> /dev/null; then
            echo "‚úÖ XcodeGen verified as available"
            xcodegen generate
          else
            echo "‚ùå XcodeGen installation failed - command not found"
            exit 1
          fi
          
      - name: Install Fastlane
        run: |
          if ! command -v fastlane &> /dev/null; then
            sudo gem install fastlane
          fi
          fastlane --version
          
      - name: Setup iOS Environment
        uses: ./.github/actions/setup-ios-environment
        with:
          xcode-version: ${{ env.XCODE_VERSION }}
          install-xcodegen: 'true'
          install-swiftlint: 'false'
          install-xcpretty: 'false'
          cache-key-suffix: 'testflight'
          
      - name: Create Archive for TestFlight
        run: |
          echo "üì¶ Creating signed archive for TestFlight with automatic signing..."
          xcodebuild archive \
            -project "${{ env.PROJECT_NAME }}.xcodeproj" \
            -scheme "${{ env.SCHEME_NAME }}" \
            -configuration "${{ env.ARCHIVE_CONFIGURATION }}" \
            -destination "generic/platform=iOS" \
            -archivePath "${{ env.PROJECT_NAME }}.xcarchive"
            
      - name: Export IPA for TestFlight
        run: |
          echo "üì§ Exporting IPA for TestFlight distribution..."
          xcodebuild -exportArchive \
            -archivePath "${{ env.PROJECT_NAME }}.xcarchive" \
            -exportPath "./TestFlight-Export" \
            -exportOptionsPlist exportOptions-automatic.plist
            
      - name: Validate IPA
        run: |
          echo "‚úÖ Validating TestFlight IPA..."
          if [[ -f "./TestFlight-Export/${{ env.PROJECT_NAME }}.ipa" ]]; then
            IPA_SIZE=$(ls -lh "./TestFlight-Export/${{ env.PROJECT_NAME }}.ipa" | awk '{print $5}')
            echo "‚úÖ IPA created successfully: $IPA_SIZE"
            
            # Basic IPA validation
            unzip -l "./TestFlight-Export/${{ env.PROJECT_NAME }}.ipa" | head -10
            echo "‚úÖ IPA structure validation complete"
          else
            echo "‚ùå IPA file not found after export"
            exit 1
          fi
            
      - name: Upload to TestFlight (Optional Automation)
        if: false  # Disabled by default - enable when ready for automation
        env:
          APPLE_ID: ${{ secrets.APPLE_ID }}
          APPLE_APP_SPECIFIC_PASSWORD: ${{ secrets.APPLE_APP_SPECIFIC_PASSWORD }}
        run: |
          echo "üöÄ Uploading to TestFlight via altool..."
          xcrun altool --upload-app \
            --file "./TestFlight-Export/${{ env.PROJECT_NAME }}.ipa" \
            --type ios \
            --username "$APPLE_ID" \
            --password "$APPLE_APP_SPECIFIC_PASSWORD"
            
      - name: Manual Upload Instructions
        if: true  # Always show manual upload instructions
        run: |
          echo "üìã Manual TestFlight Upload Instructions"
          echo "======================================="
          echo ""
          echo "Your signed IPA is ready for TestFlight upload!"
          echo ""
          echo "üìÅ IPA Location: ./TestFlight-Export/${{ env.PROJECT_NAME }}.ipa"
          echo ""
          echo "Upload Methods:"
          echo "1. üçé Xcode Organizer (Recommended):"
          echo "   ‚Ä¢ Open Xcode ‚Üí Window ‚Üí Organizer"
          echo "   ‚Ä¢ Select Archives ‚Üí Crown & Barrel"
          echo "   ‚Ä¢ Click 'Distribute App' ‚Üí 'App Store Connect'"
          echo ""
          echo "2. üì¶ Transporter App:"
          echo "   ‚Ä¢ Download Transporter from Mac App Store"
          echo "   ‚Ä¢ Drag and drop the IPA file"
          echo ""
          echo "3. üíª Command Line:"
          echo "   xcrun altool --upload-app --file [IPA_PATH] --username [APPLE_ID] --password [APP_PASSWORD]"
          echo ""
          echo "‚úÖ Build is ready for TestFlight submission!"
          
      - name: Archive Summary
        run: |
          echo "üéâ TestFlight Build Summary"
          echo "=========================="
          echo ""
          if [[ -f "./TestFlight-Export/${{ env.PROJECT_NAME }}.ipa" ]]; then
            echo "‚úÖ Archive: SUCCESS"
            echo "‚úÖ IPA Export: SUCCESS" 
            echo "üìÅ IPA Location: ./TestFlight-Export/${{ env.PROJECT_NAME }}.ipa"
            echo "üìä Team ID: ${{ secrets.APPLE_TEAM_ID }}"
            echo "üîê Signing: Automatic (Xcode managed)"
            echo ""
            echo "üöÄ Ready for TestFlight upload!"
            echo ""
            echo "Next steps:"
            echo "1. Download the IPA from GitHub Actions artifacts"
            echo "2. Upload to App Store Connect via Xcode Organizer or Transporter"
            echo "3. Submit for TestFlight beta review"
          else
            echo "‚ùå Build failed - check logs above"
            exit 1
          fi
          
      - name: Upload TestFlight artifacts
        uses: actions/upload-artifact@v4
        with:
          name: testflight-build
          path: |
            ${{ env.PROJECT_NAME }}.xcarchive/
            export/
          retention-days: 30

  # App Store Deployment
  deploy-appstore:
    name: Deploy to App Store
    runs-on: macos-latest
    if: github.event.inputs.release_type == 'appstore'
    environment: appstore
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Setup Xcode
        uses: maxim-lobanov/setup-xcode@v1
        with:
          xcode-version: ${{ env.XCODE_VERSION }}
          
      - name: Install XcodeGen
        run: |
          if ! command -v xcodegen &> /dev/null; then
            echo "Installing XcodeGen..."
            ARCH=$(uname -m)
            echo "Detected architecture: $ARCH"
            
            # Check if we're on ARM64 (more robust detection)
            IS_ARM64=false
            if [[ "$ARCH" == "arm64" ]] || [[ -d "/opt/homebrew" ]]; then
              IS_ARM64=true
              echo "Running on ARM64 architecture"
            else
              echo "Running on $ARCH architecture"
            fi
            
            # Try multiple installation strategies
            # Strategy 1: Direct download (fastest)
            echo "Trying direct download..."
            if curl -L -f https://github.com/yonaskolb/XcodeGen/releases/latest/download/xcodegen.artifactbundle.zip -o "${HOME}/xcodegen.artifactbundle.zip"; then
              echo "‚úÖ Downloaded XcodeGen artifact bundle"
              
              # Extract the bundle
              if unzip -o "${HOME}/xcodegen.artifactbundle.zip" -d "${HOME}/xcodegen/"; then
                echo "‚úÖ Extracted XcodeGen artifact bundle"
                
                # Find the bin directory in the extracted bundle
                BIN_DIR=$(find "${HOME}/xcodegen" -name "bin" -type d | head -1)
                if [ -n "$BIN_DIR" ] && [ -f "$BIN_DIR/xcodegen" ]; then
                  echo "‚úÖ Found XcodeGen binary at: $BIN_DIR/xcodegen"
                  
                  # Add to PATH for this session
                  export PATH="$BIN_DIR:$PATH"
                  echo "‚úÖ Added XcodeGen to PATH"
                  
                  # Verify installation
                  if command -v xcodegen &> /dev/null; then
                    echo "‚úÖ XcodeGen installation verified"
                    xcodegen --version
                  else
                    echo "‚ùå XcodeGen not found in PATH after installation"
                    exit 1
                  fi
                else
                  echo "‚ùå XcodeGen binary not found in extracted bundle"
                  exit 1
                fi
              else
                echo "‚ùå Failed to extract XcodeGen artifact bundle"
                exit 1
              fi
            # Strategy 2: Homebrew with ARM64 forcing (if on ARM64)
            elif [ "$IS_ARM64" = true ]; then
              echo "Trying Homebrew with ARM64 forcing..."
              if arch -arm64 /opt/homebrew/bin/brew install xcodegen 2>/dev/null || \
                 arch -arm64 /usr/local/bin/brew install xcodegen 2>/dev/null || \
                 arch -arm64 brew install xcodegen 2>/dev/null; then
                echo "‚úÖ XcodeGen installed via ARM64 Homebrew"
              else
                echo "‚ùå All installation methods failed"
                exit 1
              fi
            # Strategy 3: Standard Homebrew
            else
              echo "Trying standard Homebrew..."
              if brew install xcodegen; then
                echo "‚úÖ XcodeGen installed via standard Homebrew"
              else
                echo "‚ùå Homebrew installation failed"
                exit 1
              fi
            fi
          else
            echo "‚úÖ XcodeGen already available"
          fi
          
          # Verify XcodeGen is available before using it
          if command -v xcodegen &> /dev/null; then
            echo "‚úÖ XcodeGen verified as available"
            xcodegen generate
          else
            echo "‚ùå XcodeGen installation failed - command not found"
            exit 1
          fi
          
      - name: Install Fastlane
        run: |
          if ! command -v fastlane &> /dev/null; then
            sudo gem install fastlane
          fi
          fastlane --version
          
      - name: Setup Apple Developer Account
        env:
          APPLE_ID: ${{ secrets.APPLE_ID }}
          APPLE_ID_PASSWORD: ${{ secrets.APPLE_ID_PASSWORD }}
          TEAM_ID: ${{ secrets.TEAM_ID }}
        run: |
          echo "Setting up Apple Developer Account for App Store..."
          echo "Apple ID: $APPLE_ID"
          echo "Team ID: $TEAM_ID"
          
      - name: Create Archive for App Store
        run: |
          xcodebuild archive \
            -project "${{ env.PROJECT_NAME }}.xcodeproj" \
            -scheme "${{ env.SCHEME_NAME }}" \
            -configuration "${{ env.ARCHIVE_CONFIGURATION }}" \
            -destination "generic/platform=iOS" \
            -archivePath "${{ env.PROJECT_NAME }}.xcarchive" \
            CODE_SIGNING_ALLOWED=YES \
            DEVELOPMENT_TEAM="${{ secrets.TEAM_ID }}" \
            CODE_SIGN_IDENTITY="iPhone Distribution"
            
      - name: Export IPA for App Store
        run: |
          xcodebuild -exportArchive \
            -archivePath "${{ env.PROJECT_NAME }}.xcarchive" \
            -exportPath "./export" \
            -exportOptionsPlist exportOptions.plist \
            -allowProvisioningUpdates
            
      - name: Deploy to App Store
        env:
          APPLE_ID: ${{ secrets.APPLE_ID }}
          APPLE_ID_PASSWORD: ${{ secrets.APPLE_ID_PASSWORD }}
          FASTLANE_USER: ${{ secrets.FASTLANE_USER }}
          FASTLANE_PASSWORD: ${{ secrets.FASTLANE_PASSWORD }}
          FASTLANE_SESSION: ${{ secrets.FASTLANE_SESSION }}
          TEAM_ID: ${{ secrets.TEAM_ID }}
          MATCH_PASSWORD: ${{ secrets.MATCH_PASSWORD }}
        run: |
          echo "Deploying to App Store..."
          # Note: This would require proper Fastlane configuration
          # For now, we'll just prepare the archive
          echo "Archive created successfully for App Store deployment"
          echo "Manual deployment required with proper Fastlane setup"
          
      - name: Upload App Store artifacts
        uses: actions/upload-artifact@v4
        with:
          name: appstore-build
          path: |
            ${{ env.PROJECT_NAME }}.xcarchive/
            export/
          retention-days: 30

  # Create GitHub Release
  create-release:
    name: Create GitHub Release
    runs-on: macos-latest
    needs: [deploy-testflight, deploy-appstore]
    if: github.event_name == 'push' && startsWith(github.ref, 'refs/tags/')
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Get tag name
        id: tag
        run: echo "name=${GITHUB_REF#refs/tags/}" >> $GITHUB_OUTPUT
        
      - name: Generate release notes
        id: release-notes
        run: |
          echo "notes=## Crown & Barrel iOS App Release ${GITHUB_REF#refs/tags/}

          ### Changes
          - Automated build and deployment
          - TestFlight deployment completed
          - App Store deployment ready
          
          ### Installation
          - Download from TestFlight for beta testing
          - App Store release pending approval
          
          ### Technical Details
          - Built with Xcode ${{ env.XCODE_VERSION }}
          - iOS 17.0+ compatibility
          - Universal app for iPhone and iPad" >> $GITHUB_OUTPUT
          
      - name: Create GitHub Release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ steps.tag.outputs.name }}
          release_name: Crown & Barrel iOS ${{ steps.tag.outputs.name }}
          body: ${{ steps.release-notes.outputs.notes }}
          draft: false
          prerelease: true
