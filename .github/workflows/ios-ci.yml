name: iOS CI

on:
  push:
    branches: ["**"]
  pull_request:
    branches: ["**"]

jobs:
  unit-tests:
    name: Unit Tests
    runs-on: macos-14
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Select Xcode 16.2
        uses: maxim-lobanov/setup-xcode@v1
        with:
          xcode-version: "16.2"

      - name: Install xcpretty
        run: |
          gem install xcpretty --no-document

      - name: Install XcodeGen and generate project
        run: |
          if ! command -v xcodegen &> /dev/null; then
            brew install xcodegen
          fi
          xcodegen generate

      - name: Run Unit Tests (only)
        run: |
          # Find first available iPhone simulator
          SIMULATOR_LINE=$(xcrun simctl list devices available | grep iPhone | head -1)
          if [ -n "$SIMULATOR_LINE" ]; then
            SIMULATOR_ID=$(echo "$SIMULATOR_LINE" | grep -o '([A-F0-9\-]*)' | tr -d '()')
            if [ -n "$SIMULATOR_ID" ]; then
              echo "Using simulator ID: $SIMULATOR_ID for unit tests"
              xcodebuild -project CrownAndBarrel.xcodeproj \
                         -scheme CrownAndBarrel \
                         -destination "platform=iOS Simulator,id=$SIMULATOR_ID" \
                         -only-testing:CrownAndBarrelTests \
                         test | xcpretty
            else
              echo "No simulator ID found, skipping unit tests"
              exit 0
            fi
          else
            echo "No iPhone simulators found, skipping unit tests"
            exit 0
          fi

  ui-tests:
    name: UI Tests (hardened)
    runs-on: macos-14
    needs: unit-tests
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Select Xcode 16.2
        uses: maxim-lobanov/setup-xcode@v1
        with:
          xcode-version: "16.2"

      - name: Install xcpretty
        run: |
          gem install xcpretty --no-document

      - name: Install XcodeGen and generate project
        run: |
          if ! command -v xcodegen &> /dev/null; then
            brew install xcodegen
          fi
          xcodegen generate

      - name: Run UI Tests with retries and no parallelization
        run: |
          # Find first available iPhone simulator
          SIMULATOR_LINE=$(xcrun simctl list devices available | grep iPhone | head -1)
          if [ -n "$SIMULATOR_LINE" ]; then
            SIMULATOR_ID=$(echo "$SIMULATOR_LINE" | grep -o '([A-F0-9\-]*)' | tr -d '()')
            if [ -n "$SIMULATOR_ID" ]; then
              echo "Using simulator ID: $SIMULATOR_ID for UI tests"
              xcodebuild -project CrownAndBarrel.xcodeproj \
                         -scheme CrownAndBarrel \
                         -destination "platform=iOS Simulator,id=$SIMULATOR_ID" \
                         -only-testing:CrownAndBarrelUITests \
                         -retry-tests-on-failure \
                         -test-iterations 2 \
                         -parallel-testing-enabled NO \
                         -maximum-concurrent-test-simulator-destinations 1 \
                         test | xcpretty
            else
              echo "No simulator ID found, skipping UI tests"
              exit 0
            fi
          else
            echo "No iPhone simulators found, skipping UI tests"
            exit 0
          fi


