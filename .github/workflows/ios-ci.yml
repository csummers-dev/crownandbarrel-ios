name: iOS CI

on:
  push:
    branches: ["**"]
  pull_request:
    branches: ["**"]

jobs:
  unit-tests:
    name: Unit Tests
    runs-on: macos-14
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Select Xcode 16.2
        uses: maxim-lobanov/setup-xcode@v1
        with:
          xcode-version: "16.2"

      - name: Install xcpretty
        run: |
          gem install xcpretty --no-document

      - name: Install XcodeGen and generate project
        run: |
          if ! command -v xcodegen &> /dev/null; then
            echo "Installing XcodeGen..."
            ARCH=$(uname -m)
            echo "Detected architecture: $ARCH"
            
            # Check if we're on ARM64 (more robust detection)
            IS_ARM64=false
            if [[ "$ARCH" == "arm64" ]] || [[ -d "/opt/homebrew" ]]; then
              IS_ARM64=true
              echo "Running on ARM64 architecture"
            else
              echo "Running on $ARCH architecture"
            fi
            
            # Try multiple installation strategies
            # Strategy 1: Direct download (fastest)
            echo "Trying direct download..."
            if curl -L https://github.com/yonaskolb/XcodeGen/releases/latest/download/xcodegen.zip -o xcodegen.zip && \
               unzip -o xcodegen.zip && \
               sudo mv xcodegen /usr/local/bin/; then
              echo "✅ XcodeGen installed via direct download"
              rm -f xcodegen.zip
            # Strategy 2: Homebrew with ARM64 forcing (if on ARM64)
            elif [ "$IS_ARM64" = true ]; then
              echo "Trying Homebrew with ARM64 forcing..."
              if arch -arm64 /opt/homebrew/bin/brew install xcodegen 2>/dev/null || \
                 arch -arm64 /usr/local/bin/brew install xcodegen 2>/dev/null || \
                 arch -arm64 brew install xcodegen 2>/dev/null; then
                echo "✅ XcodeGen installed via ARM64 Homebrew"
              else
                echo "❌ All installation methods failed"
                exit 1
              fi
            # Strategy 3: Standard Homebrew
            else
              echo "Trying standard Homebrew..."
              if brew install xcodegen; then
                echo "✅ XcodeGen installed via standard Homebrew"
              else
                echo "❌ Homebrew installation failed"
                exit 1
              fi
            fi
          else
            echo "✅ XcodeGen already available"
          fi
          
          # Verify XcodeGen is available before using it
          if command -v xcodegen &> /dev/null; then
            echo "✅ XcodeGen verified as available"
            xcodegen generate
          else
            echo "❌ XcodeGen installation failed - command not found"
            exit 1
          fi

      - name: Run Unit Tests (only)
        run: |
          # Find the best available iOS 26.0 simulator for unit tests
          echo "Looking for available iOS 26.0 simulators for unit tests..."
          
          # Check for iPhone 16 Pro with iOS 26.0 first (preferred)
          if xcodebuild -showdestinations -scheme CrownAndBarrel -project CrownAndBarrel.xcodeproj 2>/dev/null | grep -q "iPhone 16 Pro.*26.0"; then
            DESTINATION="platform=iOS Simulator,name=iPhone 16 Pro,OS=26.0"
            echo "✅ Found iPhone 16 Pro with iOS 26.0 - using preferred target for unit tests"
          # Fallback to any iPhone with iOS 26.0
          elif xcodebuild -showdestinations -scheme CrownAndBarrel -project CrownAndBarrel.xcodeproj 2>/dev/null | grep -q "iPhone.*26.0"; then
            # Get first available iPhone with iOS 26.0
            IPHONE_26_LINE=$(xcodebuild -showdestinations -scheme CrownAndBarrel -project CrownAndBarrel.xcodeproj 2>/dev/null | grep "iPhone.*26.0" | head -1)
            IPHONE_NAME=$(echo "$IPHONE_26_LINE" | grep -o 'name:[^,]*' | cut -d: -f2)
            DESTINATION="platform=iOS Simulator,name=$IPHONE_NAME,OS=26.0"
            echo "✅ Found $IPHONE_NAME with iOS 26.0 - using fallback target for unit tests"
          else
            echo "❌ No iOS 26.0 simulators found, skipping unit tests"
            exit 0
          fi
          
          echo "Running unit tests with destination: $DESTINATION"
          xcodebuild -project CrownAndBarrel.xcodeproj \
                     -scheme CrownAndBarrel \
                     -destination "$DESTINATION" \
                     -only-testing:CrownAndBarrelTests \
                     test | xcpretty

  ui-tests:
    name: UI Tests (hardened)
    runs-on: macos-14
    needs: unit-tests
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Select Xcode 16.2
        uses: maxim-lobanov/setup-xcode@v1
        with:
          xcode-version: "16.2"

      - name: Install xcpretty
        run: |
          gem install xcpretty --no-document

      - name: Install XcodeGen and generate project
        run: |
          if ! command -v xcodegen &> /dev/null; then
            echo "Installing XcodeGen..."
            ARCH=$(uname -m)
            echo "Detected architecture: $ARCH"
            
            # Check if we're on ARM64 (more robust detection)
            IS_ARM64=false
            if [[ "$ARCH" == "arm64" ]] || [[ -d "/opt/homebrew" ]]; then
              IS_ARM64=true
              echo "Running on ARM64 architecture"
            else
              echo "Running on $ARCH architecture"
            fi
            
            # Try multiple installation strategies
            # Strategy 1: Direct download (fastest)
            echo "Trying direct download..."
            if curl -L https://github.com/yonaskolb/XcodeGen/releases/latest/download/xcodegen.zip -o xcodegen.zip && \
               unzip -o xcodegen.zip && \
               sudo mv xcodegen /usr/local/bin/; then
              echo "✅ XcodeGen installed via direct download"
              rm -f xcodegen.zip
            # Strategy 2: Homebrew with ARM64 forcing (if on ARM64)
            elif [ "$IS_ARM64" = true ]; then
              echo "Trying Homebrew with ARM64 forcing..."
              if arch -arm64 /opt/homebrew/bin/brew install xcodegen 2>/dev/null || \
                 arch -arm64 /usr/local/bin/brew install xcodegen 2>/dev/null || \
                 arch -arm64 brew install xcodegen 2>/dev/null; then
                echo "✅ XcodeGen installed via ARM64 Homebrew"
              else
                echo "❌ All installation methods failed"
                exit 1
              fi
            # Strategy 3: Standard Homebrew
            else
              echo "Trying standard Homebrew..."
              if brew install xcodegen; then
                echo "✅ XcodeGen installed via standard Homebrew"
              else
                echo "❌ Homebrew installation failed"
                exit 1
              fi
            fi
          else
            echo "✅ XcodeGen already available"
          fi
          
          # Verify XcodeGen is available before using it
          if command -v xcodegen &> /dev/null; then
            echo "✅ XcodeGen verified as available"
            xcodegen generate
          else
            echo "❌ XcodeGen installation failed - command not found"
            exit 1
          fi

      - name: Run UI Tests with retries and no parallelization
        run: |
          # Find the best available iOS 26.0 simulator for UI tests
          echo "Looking for available iOS 26.0 simulators for UI tests..."
          
          # Check for iPhone 16 Pro with iOS 26.0 first (preferred)
          if xcodebuild -showdestinations -scheme CrownAndBarrel -project CrownAndBarrel.xcodeproj 2>/dev/null | grep -q "iPhone 16 Pro.*26.0"; then
            DESTINATION="platform=iOS Simulator,name=iPhone 16 Pro,OS=26.0"
            echo "✅ Found iPhone 16 Pro with iOS 26.0 - using preferred target for UI tests"
          # Fallback to any iPhone with iOS 26.0
          elif xcodebuild -showdestinations -scheme CrownAndBarrel -project CrownAndBarrel.xcodeproj 2>/dev/null | grep -q "iPhone.*26.0"; then
            # Get first available iPhone with iOS 26.0
            IPHONE_26_LINE=$(xcodebuild -showdestinations -scheme CrownAndBarrel -project CrownAndBarrel.xcodeproj 2>/dev/null | grep "iPhone.*26.0" | head -1)
            IPHONE_NAME=$(echo "$IPHONE_26_LINE" | grep -o 'name:[^,]*' | cut -d: -f2)
            DESTINATION="platform=iOS Simulator,name=$IPHONE_NAME,OS=26.0"
            echo "✅ Found $IPHONE_NAME with iOS 26.0 - using fallback target for UI tests"
          else
            echo "❌ No iOS 26.0 simulators found, skipping UI tests"
            exit 0
          fi
          
          echo "Running UI tests with destination: $DESTINATION"
          xcodebuild -project CrownAndBarrel.xcodeproj \
                     -scheme CrownAndBarrel \
                     -destination "$DESTINATION" \
                     -only-testing:CrownAndBarrelUITests \
                     -retry-tests-on-failure \
                     -test-iterations 2 \
                     -parallel-testing-enabled NO \
                     -maximum-concurrent-test-simulator-destinations 1 \
                     test | xcpretty


